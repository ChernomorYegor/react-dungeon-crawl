{"version":3,"sources":["actions/game.js","actions/settings.js","gameOptions/gameOptions.js","components/StartMenu.js","containers/StartMenu.js","components/Game.js","containers/Game.js","components/Settings.js","containers/Settings.js","App.js","containers/App.js","serviceWorker.js","reducers/settings.js","reducers/game.js","reducers/index.js","index.js"],"names":["createAction","DIFFICULTY","easy","medium","hard","CERTIFICATES","SKILLS","BOSSES","StartMenu","showSettings","startGame","difficulty","mapWidth","mapHeight","generateItems","getRandomNumber","className","type","onClick","playerX","map","generatedMap","numberOfWalls","Math","ceil","console","log","i","generatedRowMap","wallVar","randomSquare","j","push","bosses","bossesInterval","floor","bossVar","bossY","bossX","bw","b","generateBosses","generateMap","connect","state","gameOptions","settings","dispatch","ActionsGame","ActionsSettings","Game","gameMap","currentCertificates","currentSkills","isDefeatedBoss","level","points","currentOffset","playerY","viewportHeight","moveLeft","moveUp","moveRight","moveDown","changeOffset","addCertificate","startLevel2","addSkill","removeBossWalls","addPointsBoss","quitGame","endGame","windowHeight","useState","message","setMessage","squareSize","timeoutFunc","item","messageText","time","timeout","setTimeout","clearTimeout","addItems","mapCoordinates","slice","round","calculatePoints","forEach","rowMap","rowIndex","square","squareIndex","factor","_quitGame","window","confirm","useEffect","handleWindowKeyDown","e","key","length","addEventListener","removeEventListener","value","max","visibleMap","index","visibleRowsMap","style","width","height","renderMap","game","certificates","skills","newPlayerX","newPlayerY","Settings","difficultyOptions","viewportWidth","backToStartMenu","saveSettings","difficultyInner","setDifficultyInner","mapHeightInner","setMapHeightInner","viewportHeightInner","setViewportHeightInner","_change","name","target","onSubmit","preventDefault","htmlFor","id","onChange","bind","this","min","step","App","isSettingsShow","gameOn","document","documentElement","clientHeight","items","itemClass","itemsInterval","itemVar","itemsBalance","itemY","itemX","random","Boolean","location","hostname","match","settingsReducer","handleActions","action","update","$merge","payload","initialState","gameReducer","$set","combineReducers","store","createStore","reducer","applyMiddleware","logger","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b8ddd134.chunk.js","sourcesContent":["import {createAction} from 'redux-actions';\n\nexport default {\n    'GAME/START_GAME': createAction('GAME/START_GAME'),\n    'GAME/MOVE_LEFT': createAction('GAME/MOVE_LEFT'),\n    'GAME/MOVE_UP': createAction('GAME/MOVE_UP'),\n    'GAME/MOVE_RIGHT': createAction('GAME/MOVE_RIGHT'),\n    'GAME/MOVE_DOWN': createAction('GAME/MOVE_DOWN'),\n    'GAME/CHANGE_OFFSET': createAction('GAME/CHANGE_OFFSET'),\n    'GAME/ADD_CERTIFICATE': createAction('GAME/ADD_CERTIFICATE'),\n    'GAME/START_LEVEL2': createAction('GAME/START_LEVEL2'),\n    'GAME/ADD_SKILL': createAction('GAME/ADD_SKILL'),\n    'GAME/REMOVE_BOSS_WALLS': createAction('GAME/REMOVE_BOSS_WALLS'),\n    'GAME/ADD_POINTS_BOSS': createAction('GAME/ADD_POINTS_BOSS'),\n    'GAME/QUIT_GAME': createAction('GAME/QUIT_GAME'),\n    'GAME/END_GAME': createAction('GAME/END_GAME'),\n};","import {createAction} from 'redux-actions';\n\nexport default {\n    'SETTINGS/SHOW_SETTINGS': createAction('SETTINGS/SHOW_SETTINGS'),\n    'SETTINGS/HIDE_SETTINGS': createAction('SETTINGS/HIDE_SETTINGS'),\n    'SETTINGS/SAVE_SETTINGS': createAction('SETTINGS/SAVE_SETTINGS'),\n};","export default {\n    DIFFICULTY: {\n        easy: 20,\n        medium: 25,\n        hard: 30,\n    },\n    CERTIFICATES: 25,\n    SKILLS: 3,\n    BOSSES: 1,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction StartMenu({showSettings, startGame, CERTIFICATES, BOSSES, difficulty, mapWidth, mapHeight, generateItems, getRandomNumber}) {\n    const PLAYER = 'player';\n    const WALL = 'wall';\n    const EMPTY = 'empty';\n    const BOSS_WALL = 'boss-wall';\n    const BOSS = 'boss';\n    const CERTIFICATE = 'certificate';\n\n    function _startGame() {\n        let playerX = getRandomNumber(0, mapWidth - 1);\n        let map = generateMap(playerX);\n        console.log(map, playerX);\n        startGame({map, playerX});\n    }\n\n    function generateMap(playerX) {\n        let generatedMap = [];\n        let numberOfWalls = Math.ceil((mapWidth * difficulty) / 100);\n        console.log(numberOfWalls);\n        for (let i = 0; i < mapHeight; i++) {\n            let generatedRowMap = [];\n\n            if (i === 0) {\n                generatedRowMap[playerX] = PLAYER;\n            }\n\n            let wallVar = 0;\n            while (wallVar < numberOfWalls) {\n                let randomSquare = getRandomNumber(0, mapWidth - 1);\n                if (generatedRowMap[randomSquare] !== WALL && generatedRowMap[randomSquare] !== PLAYER) {\n                    generatedRowMap[randomSquare] = WALL;\n                    wallVar++;\n                }\n            }\n\n            for (let j = 0; j < mapWidth; j++) {\n                if (!generatedRowMap[j]) {\n                    generatedRowMap[j] = EMPTY;\n                }\n            }\n            generatedMap.push(generatedRowMap);\n        }\n\n        generateBosses(generatedMap, BOSSES);\n        generateItems(generatedMap, CERTIFICATES, CERTIFICATE);\n\n        return generatedMap;\n    }\n\n    function generateBosses(map, bosses) {\n        let bossesInterval = Math.floor(mapHeight / bosses);\n        let bossVar = 0;\n        console.log(bossesInterval);\n        while (bossVar < mapHeight) {\n            let bossY = getRandomNumber(bossVar, bossVar + bossesInterval - 5);\n            let bossX = getRandomNumber(0, mapWidth - 5);\n            console.log(bossVar);\n            for (let bw = 1; bw < 4; bw++) {\n                map[bossY][bossX] = BOSS_WALL;\n                map[bossY + bw][bossX] = BOSS_WALL;\n                map[bossY][bossX + bw] = BOSS_WALL;\n                map[bossY + bw][bossX + 3] = BOSS_WALL;\n                map[bossY + 3][bossX + bw] = BOSS_WALL;\n            }\n            for (let b = 1; b < 3; b++) {\n                map[bossY + 1][bossX + b] = BOSS;\n                map[bossY + 2][bossX + b] = BOSS;\n            }\n            bossVar += bossesInterval;\n        }\n    }\n\n    return (\n        <div className=\"start-container\">\n            <h1>Dungeon Crawl</h1>\n            <div className=\"start-menu\">\n                <button type=\"button\" onClick={_startGame}>Start Game</button>\n                <button type=\"button\" onClick={showSettings}>Settings</button>\n            </div>\n        </div>\n    );\n}\n\nStartMenu.propTypes = {\n    showSettings: PropTypes.func.isRequired,\n    startGame: PropTypes.func.isRequired,\n    CERTIFICATES: PropTypes.number.isRequired,\n    BOSSES: PropTypes.number.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    generateItems: PropTypes.func.isRequired,\n    getRandomNumber: PropTypes.func.isRequired,\n};\n\nexport default StartMenu;","import {connect} from 'react-redux';\nimport ActionsGame from \"../actions/game\";\nimport ActionsSettings from \"../actions/settings\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport StartMenu from \"../components/StartMenu\";\n\nconst mapStateToProps = state => {\n    return {\n        CERTIFICATES: gameOptions.CERTIFICATES,\n        BOSSES: gameOptions.BOSSES,\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        startGame: ({map, playerX}) => dispatch(ActionsGame[\"GAME/START_GAME\"]({map, playerX})),\n        showSettings: () => dispatch(ActionsSettings[\"SETTINGS/SHOW_SETTINGS\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StartMenu);","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Game(\n    {\n        CERTIFICATES,\n        SKILLS,\n\n        gameMap,\n        currentCertificates,\n        currentSkills,\n        isDefeatedBoss,\n        level,\n        points,\n        currentOffset,\n        playerX,\n        playerY,\n\n        difficulty,\n        mapWidth,\n        mapHeight,\n        viewportHeight,\n\n        moveLeft,\n        moveUp,\n        moveRight,\n        moveDown,\n        changeOffset,\n        addCertificate,\n        startLevel2,\n        addSkill,\n        removeBossWalls,\n        addPointsBoss,\n        quitGame,\n        endGame,\n\n        windowHeight,\n        generateItems,\n    }\n) {\n    const [message, setMessage] = useState('');\n\n    const EMPTY = 'empty';\n    const WALL = 'wall';\n    const BOSS_WALL = 'boss-wall';\n    const BOSS = 'boss';\n    const SKILL = 'skill';\n    const CERTIFICATE = 'certificate';\n\n    const ARROW_LEFT = 'ArrowLeft';\n    const ARROW_UP = 'ArrowUp';\n    const ARROW_RIGHT = 'ArrowRight';\n    const ARROW_DOWN = 'ArrowDown';\n    const ESCAPE = 'Escape';\n\n    const squareSize = Math.floor((windowHeight * 51) / (100 * viewportHeight));\n    console.log('squareSize',squareSize);\n\n    useEffect(() => {\n        if (!isDefeatedBoss) {\n            function handleWindowKeyDown(e) {\n                const beforeBorder = 3;\n                switch (e.key) {\n                    case ARROW_LEFT:\n                        console.log(ARROW_LEFT);\n                        if (playerX === 0 && gameMap[playerY][mapWidth - 1] !== WALL && gameMap[playerY][mapWidth - 1] !== BOSS_WALL) {\n                            addItems(gameMap[playerY][mapWidth - 1]);\n                            moveLeft(mapWidth - 1);\n                            break;\n                        }\n                        if (playerX !== 0 && gameMap[playerY][playerX - 1] !== WALL && gameMap[playerY][playerX - 1] !== BOSS_WALL) {\n                            addItems(gameMap[playerY][playerX - 1]);\n                            moveLeft(playerX - 1);\n                            break;\n                        }\n                        break;\n                    case ARROW_UP:\n                        console.log(ARROW_UP);\n                        if (playerY === 0) {\n                            break;\n                        }\n                        if (gameMap[playerY - 1][playerX] !== WALL && gameMap[playerY - 1][playerX] !== BOSS_WALL) {\n                            if ((playerY <= beforeBorder + currentOffset) && !(playerY <= beforeBorder)) {\n                                changeOffset(currentOffset - 1);\n                            }\n                            addItems(gameMap[playerY - 1][playerX]);\n                            moveUp(playerY - 1);\n                            break;\n                        }\n                        break;\n                    case ARROW_RIGHT:\n                        console.log(ARROW_RIGHT);\n                        if (playerX === mapWidth - 1 && gameMap[playerY][0] !== WALL && gameMap[playerY][0] !== BOSS_WALL) {\n                            addItems(gameMap[playerY][0]);\n                            moveLeft(0);\n                            break;\n                        }\n                        if (playerX !== mapWidth - 1 && gameMap[playerY][playerX + 1] !== WALL && gameMap[playerY][playerX + 1] !== BOSS_WALL) {\n                            addItems(gameMap[playerY][playerX + 1]);\n                            moveRight(playerX + 1);\n                            break;\n                        }\n                        break;\n                    case ARROW_DOWN:\n                        console.log(ARROW_DOWN);\n                        if (playerY === gameMap.length - 1) {\n                            break;\n                        }\n                        if (gameMap[playerY + 1][playerX] !== WALL && gameMap[playerY + 1][playerX] !== BOSS_WALL) {\n                            if ((playerY >= (viewportHeight - 1) - beforeBorder + currentOffset) && !(playerY >= (mapHeight - 1) - beforeBorder)) {\n                                changeOffset(currentOffset + 1);\n                            }\n                            addItems(gameMap[playerY + 1][playerX]);\n                            moveDown(playerY + 1);\n                            break;\n                        }\n                        break;\n                    case ESCAPE:\n                        console.log('Quit Game');\n                        _quitGame()\n                        break;\n                    default: break;\n                }\n            }\n\n            window.addEventListener('keydown', handleWindowKeyDown);\n            return () => window.removeEventListener('keydown', handleWindowKeyDown);\n        }\n    }, [playerX, playerY]);\n\n    useEffect(() => {\n        timeoutFunc(currentCertificates,'+1 certificate', 500);\n    },[currentCertificates]);\n\n    useEffect(() => {\n        timeoutFunc(currentSkills,'+1 skill', 500);\n    },[currentSkills]);\n\n    function timeoutFunc(item, messageText, time) {\n        if (item > 0) {\n            setMessage(messageText);\n            const timeout = setTimeout(() => {\n                setMessage('');\n            }, time);\n\n            return () => clearTimeout(timeout);\n        }\n    }\n\n    function addItems(mapCoordinates) {\n        if (mapCoordinates === CERTIFICATE) {\n            if (currentCertificates === CERTIFICATES - 1) {\n                let map = gameMap.slice();\n                console.log(`map`, map);\n                generateItems(map, SKILLS, SKILL);\n                console.log(`map`, map);\n                startLevel2({map});\n            }\n            addCertificate(Math.round(calculatePoints(1)));\n        }\n        if (mapCoordinates === SKILL) {\n            if (currentSkills === SKILLS - 1) {\n                let map = gameMap.slice();\n                console.log(`map`, map);\n                map.forEach((rowMap, rowIndex) => rowMap.forEach((square, squareIndex) => {\n                    if (square === BOSS_WALL) {\n                        console.log(`square-change`, square);\n                        map[rowIndex][squareIndex] = EMPTY;\n                    }\n                }));\n                console.log(`map`, map);\n                removeBossWalls({map});\n            }\n            addSkill(Math.round(calculatePoints(10)));\n        }\n        if (mapCoordinates === BOSS) {\n            addPointsBoss(Math.round(calculatePoints(30)));\n            endGame();\n        }\n    }\n\n    function calculatePoints(factor) {\n        return (factor * difficulty * (mapHeight / 100) * (10 / viewportHeight))\n    }\n\n    function _quitGame() {\n        if (window.confirm('Are you sure you want to quit?')) {\n            quitGame();\n        }\n    }\n    \n    function renderMap() {\n        let visibleMap = [];\n        for (let index = currentOffset; index < currentOffset + viewportHeight; index++) {\n            let visibleRowsMap = gameMap[index];\n            visibleMap.push(visibleRowsMap);\n        }\n        console.log(visibleMap);\n        console.log(currentOffset);\n\n        return (\n            visibleMap.map((rowMap, rowIndex) => {\n                return (\n                    <div className={\n                        rowIndex + currentOffset === 0 ? \"row-map first\" : rowIndex + currentOffset === (mapHeight - 1) ? \"row-map last\" : \"row-map\"\n                    } key={rowIndex + currentOffset}>\n                        {\n                            rowMap.map((square, squareIndex) => {\n                                return (\n                                    <div className={`square ${square}`} key={`${rowIndex + currentOffset}${squareIndex}`} style={{width: `${squareSize}px`, height: `${squareSize}px`}}></div>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            })\n        )\n    }\n\n    function renderGameOver() {\n        return (\n            <div className=\"game-over\">\n                <p>Congratulations!</p>\n                <p>You left the dungeon!</p>\n                <p className=\"result\">Your result: {points} points.</p>\n            </div>\n        )\n    }\n    \n    return (\n        <div className=\"game\">\n            <div className=\"top-bar-head\">\n                <h2>Dungeon Crawl</h2>\n                <button className=\"btn-quit\" type=\"text\" onClick={_quitGame}>Quit Game</button>\n            </div>\n            <div className=\"top-bar\">\n                <div className=\"top-bar-stats\">\n                    <div>Level: <span>{level}</span></div>\n                    <div>\n                        <p>Certificates: <span>{currentCertificates}/{CERTIFICATES}</span></p>\n                        <progress value={currentCertificates} max={CERTIFICATES}></progress>\n                    </div>\n                    <div>\n                        <p>Skills: <span>{currentSkills}/{SKILLS}</span></p>\n                        <progress value={currentSkills} max={SKILLS}></progress>\n                    </div>\n                    <div>Points: <span>{points}</span></div>\n                </div>\n                <div className=\"messages\">\n                    <p>{message}</p>\n                    { level === 1 && <p>Collect 25 certificates.</p> }\n                    { level === 2 && currentSkills < SKILLS && <p>Collect 3 skills.</p> }\n                    { level === 2 && currentSkills === SKILLS && !isDefeatedBoss && <p>Find the boss.</p> }\n                </div>\n            </div>\n            <div className=\"map\">\n                { !isDefeatedBoss ? renderMap() : renderGameOver() }\n            </div>\n            <div className=\"bottom-bar\">\n                <div>\n                    <p>Press 'Arrows' on the keyboard to move.</p>\n                    <p>Press 'Esc' to quit the game or click the button at the top right.</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nGame.propTypes = {\n    CERTIFICATES: PropTypes.number.isRequired,\n    SKILLS: PropTypes.number.isRequired,\n    gameMap: PropTypes.arrayOf(PropTypes.array).isRequired,\n    currentCertificates: PropTypes.number.isRequired,\n    currentSkills: PropTypes.number.isRequired,\n    isDefeatedBoss: PropTypes.bool.isRequired,\n    level: PropTypes.number.isRequired,\n    points: PropTypes.number.isRequired,\n    currentOffset: PropTypes.number.isRequired,\n    playerX: PropTypes.number.isRequired,\n    playerY: PropTypes.number.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportHeight: PropTypes.number.isRequired,\n    moveLeft: PropTypes.func.isRequired,\n    moveUp: PropTypes.func.isRequired,\n    moveRight: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n    changeOffset: PropTypes.func.isRequired,\n    addCertificate: PropTypes.func.isRequired,\n    startLevel2: PropTypes.func.isRequired,\n    addSkill: PropTypes.func.isRequired,\n    removeBossWalls: PropTypes.func.isRequired,\n    addPointsBoss: PropTypes.func.isRequired,\n    quitGame: PropTypes.func.isRequired,\n    endGame: PropTypes.func.isRequired,\n    windowHeight: PropTypes.number.isRequired,\n    generateItems: PropTypes.func.isRequired,\n};\n\nexport default Game;","import {connect} from 'react-redux';\nimport ActionsGame from \"../actions/game\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport Game from \"../components/Game\";\n\nconst mapStateToProps = state => {\n    return {\n        CERTIFICATES: gameOptions.CERTIFICATES,\n        SKILLS: gameOptions.SKILLS,\n\n        gameMap: state.game.map,\n        currentCertificates: state.game.certificates,\n        currentSkills: state.game.skills,\n        isDefeatedBoss: state.game.isDefeatedBoss,\n        level: state.game.level,\n        points: state.game.points,\n        currentOffset: state.game.currentOffset,\n        playerX: state.game.playerX,\n        playerY: state.game.playerY,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportHeight: state.settings.viewportHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        moveLeft: (newPlayerX) => dispatch(ActionsGame[\"GAME/MOVE_LEFT\"](newPlayerX)),\n        moveUp: (newPlayerY) => dispatch(ActionsGame[\"GAME/MOVE_UP\"](newPlayerY)),\n        moveRight: (newPlayerX) => dispatch(ActionsGame[\"GAME/MOVE_RIGHT\"](newPlayerX)),\n        moveDown: (newPlayerY) => dispatch(ActionsGame[\"GAME/MOVE_DOWN\"](newPlayerY)),\n        changeOffset: (currentOffset) => dispatch(ActionsGame[\"GAME/CHANGE_OFFSET\"](currentOffset)),\n        addCertificate: (points) => dispatch(ActionsGame[\"GAME/ADD_CERTIFICATE\"](points)),\n        startLevel2: ({map}) => dispatch(ActionsGame[\"GAME/START_LEVEL2\"]({map})),\n        addSkill: (points) => dispatch(ActionsGame[\"GAME/ADD_SKILL\"](points)),\n        removeBossWalls: ({map}) => dispatch(ActionsGame[\"GAME/REMOVE_BOSS_WALLS\"]({map})),\n        addPointsBoss: (points) => dispatch(ActionsGame[\"GAME/ADD_POINTS_BOSS\"](points)),\n        quitGame: () => dispatch(ActionsGame[\"GAME/QUIT_GAME\"]()),\n        endGame: () => dispatch(ActionsGame[\"GAME/END_GAME\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Game);","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Settings({difficultyOptions, difficulty, mapWidth, mapHeight, viewportWidth, viewportHeight, backToStartMenu, saveSettings}) {\n    const [difficultyInner, setDifficultyInner] = useState(difficulty);\n    const [mapHeightInner, setMapHeightInner] = useState(mapHeight);\n    const [viewportHeightInner, setViewportHeightInner] = useState(viewportHeight);\n\n    const DIFFICULTY = 'Difficulty';\n    const MAP_HEIGHT = 'Map Height';\n    const VIEWPORT_HEIGHT = 'Viewport Height';\n\n    function _change(name, e) {\n        switch(name) {\n            case DIFFICULTY: setDifficultyInner(+e.target.value); break;\n            case MAP_HEIGHT: setMapHeightInner(+e.target.value); break;\n            case VIEWPORT_HEIGHT: setViewportHeightInner(+e.target.value); break;\n            default: break;\n        }\n    }\n\n    function _saveSettings(e) {\n        e.preventDefault();\n        console.log({difficultyInner, mapHeightInner, viewportHeightInner});\n        saveSettings({difficultyInner, mapHeightInner, viewportHeightInner});\n    }\n\n    return (\n        <div className=\"settings\">\n            <div className=\"top-bar-head\">\n                <h3>Settings</h3>\n                <button className=\"btn-back\" type=\"text\" onClick={backToStartMenu}>Back</button>\n            </div>\n            <form className=\"settings-form\" onSubmit={_saveSettings}>\n                <div>\n                    <label htmlFor=\"difficulty\">Difficulty:</label>\n                    <select id=\"difficulty\" value={difficultyInner} onChange={_change.bind(this, DIFFICULTY)}>\n                        <option value={difficultyOptions.easy}>Easy</option>\n                        <option value={difficultyOptions.medium}>Medium</option>\n                        <option value={difficultyOptions.hard}>Hard</option>\n                    </select>\n                </div>\n                {/*<div>*/}\n                {/*    <label htmlFor=\"map-width\">Map Width:</label>*/}\n                {/*    <input id=\"map-width\" type=\"number\" value={mapWidth} min=\"10\" max=\"250\" step=\"5\" onChange={_change.bind(this, 'Map Width')} />*/}\n                {/*</div>*/}\n                <div>\n                    <label htmlFor=\"map-height\">Map Height <small>(50 - 500)</small>:</label>\n                    <input id=\"map-height\" type=\"number\" value={mapHeightInner} min=\"50\" max=\"500\" step=\"5\" onChange={_change.bind(this, MAP_HEIGHT)} />\n                </div>\n                {/*<div>*/}\n                {/*    <label htmlFor=\"viewport-width\">Viewport Width:</label>*/}\n                {/*    <input id=\"viewport-width\" type=\"number\" value={viewportWidth} min=\"10\" max=\"20\" step=\"1\" onChange={_change.bind(this, 'Viewport Width')} />*/}\n                {/*</div>*/}\n                <div>\n                    <label htmlFor=\"viewport-height\">Viewport Height <small>(10 - 20)</small>:</label>\n                    <input id=\"viewport-height\" type=\"number\" value={viewportHeightInner} min=\"10\" max=\"20\" step=\"1\" onChange={_change.bind(this, VIEWPORT_HEIGHT)} />\n                </div>\n                <button type=\"submit\" className=\"btn-save\">Save</button>\n            </form>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    difficultyOptions: PropTypes.object.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportWidth: PropTypes.number.isRequired,\n    viewportHeight: PropTypes.number.isRequired,\n    backToStartMenu: PropTypes.func.isRequired,\n    saveSettings: PropTypes.func.isRequired,\n};\n\nexport default Settings;","import {connect} from 'react-redux';\nimport ActionsSettings from \"../actions/settings\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport Settings from \"../components/Settings\";\n\nconst mapStateToProps = state => {\n    return {\n        difficultyOptions: gameOptions.DIFFICULTY,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportWidth: state.settings.viewportWidth,\n        viewportHeight: state.settings.viewportHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        backToStartMenu: () => dispatch(ActionsSettings[\"SETTINGS/HIDE_SETTINGS\"]()),\n        saveSettings: ({difficultyInner, mapHeightInner, viewportHeightInner}) => dispatch(ActionsSettings[\"SETTINGS/SAVE_SETTINGS\"]({difficultyInner, mapHeightInner, viewportHeightInner})),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Settings);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport StartMenu from \"./containers/StartMenu\";\nimport Game from \"./containers/Game\";\nimport Settings from \"./containers/Settings\";\n\nfunction App({isSettingsShow, gameOn, mapWidth, mapHeight}) {\n    const windowHeight = document.documentElement.clientHeight;\n    console.log('windowHeight', windowHeight);\n    const EMPTY = 'empty';\n    const WALL = 'wall';\n    const BOSS_WALL = 'boss-wall';\n\n    function generateItems(map, items, itemClass) {\n        let itemsInterval = Math.floor(mapHeight / items);\n        let itemVar = 0;\n        let itemsBalance = 0;\n        if (mapHeight % items !== 0) {\n            itemVar = 1;\n            itemsBalance = Math.ceil((mapHeight % items)) - 1;\n        }\n        console.log(`itemBalance`, itemsBalance);\n        console.log(`itemsInterval`, itemsInterval);\n        while (itemVar < mapHeight) {\n            let itemY = getRandomNumber(itemVar, itemVar + itemsInterval - 1);\n            let itemX = getRandomNumber(0, mapWidth - 1);\n            console.log(`itemVar`, itemVar);\n            if ( (map[itemY][itemX] === EMPTY) &&\n                !(\n                    !(itemX === 0) && !(itemX === mapWidth - 1) && !(itemY === 0) && !(itemY === mapHeight - 1) &&\n                    (map[itemY][itemX - 1] === WALL || map[itemY][itemX - 1] === BOSS_WALL) &&\n                    (map[itemY + 1][itemX] === WALL || map[itemY + 1][itemX] === BOSS_WALL) &&\n                    (map[itemY][itemX + 1] === WALL || map[itemY][itemX + 1] === BOSS_WALL) &&\n                    (map[itemY - 1][itemX] === WALL || map[itemY - 1][itemX] === BOSS_WALL)\n                )\n            ) {\n                map[itemY][itemX] = itemClass;\n                if (itemsBalance > 0) {\n                    itemVar += itemsInterval + 1;\n                    itemsBalance--;\n                } else if (itemsBalance === 0) {\n                    itemVar += itemsInterval;\n                }\n            }\n        }\n    }\n\n    function getRandomNumber(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    return (\n        <div style={{height: windowHeight + 'px'}}>\n            { (!isSettingsShow && !gameOn) && <StartMenu generateItems={generateItems} getRandomNumber={getRandomNumber}/> }\n            { gameOn && <Game windowHeight={windowHeight} generateItems={generateItems}/> }\n            { isSettingsShow && <Settings /> }\n        </div>\n    );\n}\n\nApp.propTypes = {\n    isSettingsShow: PropTypes.bool,\n    gameOn: PropTypes.bool,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n};\n\nexport default App;","import {connect} from 'react-redux';\nimport App from \"../App\";\n\nconst mapStateToProps = state => {\n    return {\n        isSettingsShow: state.settings.isSettingsShow,\n        gameOn: state.game.gameOn,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\nimport ActionsSettings from './../actions/settings';\n\nconst initialState = {\n    isSettingsShow: false,\n    difficulty: 20,\n    mapWidth: 20,\n    mapHeight: 100,\n    viewportWidth: 20,\n    viewportHeight: 10,\n};\n\nconst settingsReducer = handleActions({\n    [ActionsSettings['SETTINGS/SHOW_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isSettingsShow: true,\n            }\n        });\n    },\n    [ActionsSettings['SETTINGS/HIDE_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isSettingsShow: false,\n            }\n        });\n    },\n    [ActionsSettings['SETTINGS/SAVE_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                difficulty: action.payload.difficultyInner,\n                mapHeight: action.payload.mapHeightInner,\n                viewportHeight: action.payload.viewportHeightInner,\n            }\n        });\n    },\n}, initialState);\n\nexport default settingsReducer;","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\nimport ActionsGame from './../actions/game';\n\nconst initialState = {\n    gameOn: false,\n    map: [],\n    certificates: 0,\n    skills: 0,\n    isDefeatedBoss: false,\n    level: 0,\n    points: 0,\n    currentOffset: 0,\n    playerX: 0,\n    playerY: 0,\n};\n\nconst gameReducer = handleActions({\n    [ActionsGame['GAME/START_GAME']]: (state, action) => {\n        console.log(action.payload);\n        return update(state, {\n            $merge: {\n                gameOn: true,\n                map: action.payload.map,\n                level: 1,\n                playerX: action.payload.playerX,\n            }\n        });\n    },\n    [ActionsGame['GAME/MOVE_LEFT']]: (state, action) => {\n        return update(state, {\n            map: {\n                 [state.playerY]: {[state.playerX]: {$set: 'empty'}, [action.payload]: {$set: 'player'}},\n            },\n            playerX: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_UP']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}},\n                [action.payload]: {[state.playerX]: {$set: 'player'}}\n            },\n            playerY: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_RIGHT']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}, [action.payload]: {$set: 'player'}},\n            },\n            playerX: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_DOWN']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}},\n                [action.payload]: {[state.playerX]: {$set: 'player'}}\n            },\n            playerY: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/CHANGE_OFFSET']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                currentOffset: action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_CERTIFICATE']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                certificates: state.certificates + 1,\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/START_LEVEL2']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                map: action.payload.map,\n                level: 2,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_SKILL']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                skills: state.skills + 1,\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/REMOVE_BOSS_WALLS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                map: action.payload.map,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_POINTS_BOSS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/QUIT_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                gameOn: initialState.gameOn,\n                map: initialState.map,\n                certificates: initialState.certificates,\n                skills: initialState.skills,\n                isDefeatedBoss: initialState.isDefeatedBoss,\n                level: initialState.level,\n                points: initialState.points,\n                currentOffset: initialState.currentOffset,\n                playerX: initialState.playerX,\n                playerY: initialState.playerY,\n            }\n        });\n    },\n    [ActionsGame['GAME/END_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isDefeatedBoss: true,\n            }\n        });\n    },\n}, initialState);\n\nexport default gameReducer;","import { combineReducers } from 'redux'\n\nimport settings from './settings';\nimport game from './game';\n\nexport default combineReducers({ settings, game });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducers';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger';\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}