{"version":3,"sources":["actions/game.js","actions/settings.js","actions/topResults.js","gameOptions/gameOptions.js","components/StartMenu.js","containers/StartMenu.js","components/Game.js","containers/Game.js","components/Settings.js","containers/Settings.js","components/TopResults.js","containers/TopResults.js","App.js","containers/App.js","serviceWorker.js","reducers/game.js","reducers/settings.js","reducers/topResults.js","reducers/index.js","services/settingsService.js","sagas/settingsSaga.js","services/topResultsService.js","sagas/topResultsSaga.js","index.js"],"names":["createAction","DIFFICULTY","easy","medium","hard","CERTIFICATES","SKILLS","BOSSES","NUMBER_OF_RESULTS","StartMenu","difficulty","mapWidth","mapHeight","viewportWidth","generateItems","getRandomNumber","startGame","showSettings","showTopResults","className","type","onClick","playerX","map","generatedMap","numberOfWalls","Math","ceil","i","generatedRowMap","wallVar","randomSquare","j","push","bosses","bossesInterval","floor","bossVar","bossY","bossX","bw","b","generateBosses","generateMap","connect","state","gameOptions","settings","dispatch","ActionsGame","ActionsSettings","ActionsTopResults","Game","gameMap","currentCertificates","currentSkills","isDefeatedBoss","level","points","currentOffsetX","currentOffsetY","playerY","viewportHeight","playerName","isPlayerNameError","moveLeft","moveUp","moveRight","moveDown","changeOffsetX","changeOffsetY","addCertificate","startLevel2","addSkill","removeBossWalls","addPointsBoss","quitGame","endGame","onPlayerNameChange","saveResult","playerNameError","windowWidth","windowHeight","useState","message","setMessage","squareWidth","squareHeight","squareSize","timeoutFunc","item","messageText","time","timeout","setTimeout","clearTimeout","addItems","mapCoordinates","replace","slice","round","calculatePoints","forEach","rowMap","rowIndex","square","squareIndex","factor","_quitGame","window","confirm","_saveResult","e","preventDefault","trim","useEffect","handleWindowKeyDown","key","length","addEventListener","removeEventListener","value","max","onSubmit","placeholder","onChange","visibleMap","y","visibleRowsMap","style","width","height","src","process","alt","renderMap","game","certificates","skills","topResults","newPlayerX","newPlayerY","Settings","difficultyOptions","backToStartMenu","saveSettings","viewportWidthMax","viewportHeightMax","difficultyLocal","setDifficultyLocal","mapWidthLocal","setMapWidthLocal","mapHeightLocal","setMapHeightLocal","viewportWidthLocal","setViewportWidthLocal","viewportHeightLocal","setViewportHeightLocal","_change","name","target","htmlFor","id","bind","this","min","step","TopResults","getResults","result","index","App","gameOn","isSettingsShow","isTopResultsShow","getSettings","document","documentElement","clientWidth","clientHeight","items","itemClass","itemsInterval","itemIncrement","itemVar","itemsBalance","itemY","itemX","isWall","x","random","Boolean","location","hostname","match","initialState","gameReducer","handleActions","action","update","$merge","payload","$set","settingsReducer","topResultsReducer","combineReducers","localSettingsRaw","localStorage","getItem","JSON","parse","setItem","stringify","getSettingsSaga","saveSettingsSaga","settingsSaga","call","settingsService","get","localSettings","put","save","takeLatest","all","splice","Date","now","pop","getResultsSaga","saveResultSaga","topResultsSaga","topResultsService","select","topResultsSaved","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","logger","run","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9f619012.chunk.js","sourcesContent":["import {createAction} from 'redux-actions';\n\nexport default {\n    'GAME/START_GAME': createAction('GAME/START_GAME'),\n    'GAME/MOVE_LEFT': createAction('GAME/MOVE_LEFT'),\n    'GAME/MOVE_UP': createAction('GAME/MOVE_UP'),\n    'GAME/MOVE_RIGHT': createAction('GAME/MOVE_RIGHT'),\n    'GAME/MOVE_DOWN': createAction('GAME/MOVE_DOWN'),\n    'GAME/CHANGE_OFFSET_X': createAction('GAME/CHANGE_OFFSET_X'),\n    'GAME/CHANGE_OFFSET_Y': createAction('GAME/CHANGE_OFFSET_Y'),\n    'GAME/ADD_CERTIFICATE': createAction('GAME/ADD_CERTIFICATE'),\n    'GAME/START_LEVEL2': createAction('GAME/START_LEVEL2'),\n    'GAME/ADD_SKILL': createAction('GAME/ADD_SKILL'),\n    'GAME/REMOVE_BOSS_WALLS': createAction('GAME/REMOVE_BOSS_WALLS'),\n    'GAME/ADD_POINTS_BOSS': createAction('GAME/ADD_POINTS_BOSS'),\n    'GAME/QUIT_GAME': createAction('GAME/QUIT_GAME'),\n    'GAME/END_GAME': createAction('GAME/END_GAME'),\n};","import {createAction} from 'redux-actions';\n\nexport default {\n    'SETTINGS/SHOW_SETTINGS': createAction('SETTINGS/SHOW_SETTINGS'),\n    'SETTINGS/HIDE_SETTINGS': createAction('SETTINGS/HIDE_SETTINGS'),\n\n    'SETTINGS/GET_SETTINGS': createAction('SETTINGS/GET_SETTINGS'),\n    'SETTINGS/GET_SETTINGS_SUCCESSFULLY': createAction('SETTINGS/GET_SETTINGS_SUCCESSFULLY'),\n    'SETTINGS/GET_SETTINGS_ERROR': createAction('SETTINGS/GET_SETTINGS_ERROR'),\n    'SETTINGS/SAVE_SETTINGS': createAction('SETTINGS/SAVE_SETTINGS'),\n    'SETTINGS/SAVE_SETTINGS_SUCCESSFULLY': createAction('SETTINGS/SAVE_SETTINGS_SUCCESSFULLY'),\n    'SETTINGS/SAVE_SETTINGS_ERROR': createAction('SETTINGS/SAVE_SETTINGS_ERROR'),\n};","import {createAction} from 'redux-actions';\n\nexport default {\n    'TOP_RESULTS/SHOW_TOP_RESULTS': createAction('TOP_RESULTS/SHOW_TOP_RESULTS'),\n    'TOP_RESULTS/HIDE_TOP_RESULTS': createAction('TOP_RESULTS/HIDE_TOP_RESULTS'),\n\n    'TOP_RESULTS/PLAYER_NAME_CHANGED': createAction('TOP_RESULTS/PLAYER_NAME_CHANGED'),\n    'TOP_RESULTS/GET_RESULTS': createAction('TOP_RESULTS/GET_RESULTS'),\n    'TOP_RESULTS/GET_RESULTS_SUCCESSFULLY': createAction('TOP_RESULTS/GET_RESULTS_SUCCESSFULLY'),\n    'TOP_RESULTS/GET_RESULTS_ERROR': createAction('TOP_RESULTS/GET_RESULTS_ERROR'),\n    'TOP_RESULTS/SAVE_RESULT': createAction('TOP_RESULTS/SAVE_RESULT'),\n    'TOP_RESULTS/SAVE_RESULT_SUCCESSFULLY': createAction('TOP_RESULTS/SAVE_RESULT_SUCCESSFULLY'),\n    'TOP_RESULTS/SAVE_RESULT_ERROR': createAction('TOP_RESULTS/SAVE_RESULT_ERROR'),\n    'TOP_RESULTS/PLAYER_NAME_ERROR': createAction('TOP_RESULTS/PLAYER_NAME_ERROR'),\n};","export default {\n    DIFFICULTY: {\n        easy: 20,\n        medium: 25,\n        hard: 30,\n    },\n    CERTIFICATES: 25,\n    SKILLS: 3,\n    BOSSES: 1,\n    NUMBER_OF_RESULTS: 10,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction StartMenu(\n    {\n        CERTIFICATES,\n        BOSSES,\n\n        difficulty,\n        mapWidth,\n        mapHeight,\n        viewportWidth,\n\n        generateItems,\n        getRandomNumber,\n\n        startGame,\n        showSettings,\n        showTopResults,\n    }\n) {\n    const PLAYER = 'player';\n    const WALL = 'wall';\n    const EMPTY = 'empty';\n    const BOSS_WALL = 'boss-wall';\n    const BOSS = 'boss';\n    const BOSS_SIZE = 4;\n    const CERTIFICATE = 'certificate';\n\n    function _startGame() {\n        let playerX = getRandomNumber(0, viewportWidth - 1);\n        let map = generateMap(playerX);\n        startGame({map, playerX});\n    }\n\n    function generateMap(playerX) {\n        let generatedMap = [];\n        let numberOfWalls = Math.ceil(mapWidth * difficulty / 100);\n\n        for (let i = 0; i < mapHeight; i++) {\n            let generatedRowMap = [];\n\n            if (i === 0) {\n                generatedRowMap[playerX] = PLAYER;\n            }\n\n            let wallVar = 0;\n            while (wallVar < numberOfWalls) {\n                let randomSquare = getRandomNumber(0, mapWidth - 1);\n                if (generatedRowMap[randomSquare] !== WALL && generatedRowMap[randomSquare] !== PLAYER &&\n                    !(i === 1 && randomSquare === playerX)) {\n                    generatedRowMap[randomSquare] = WALL;\n                    wallVar++;\n                }\n            }\n\n            for (let j = 0; j < mapWidth; j++) {\n                if (!generatedRowMap[j]) {\n                    generatedRowMap[j] = EMPTY;\n                }\n            }\n            generatedMap.push(generatedRowMap);\n        }\n\n        generateBosses(generatedMap, BOSSES);\n        generateItems(generatedMap, CERTIFICATES, CERTIFICATE);\n\n        return generatedMap;\n    }\n\n    function generateBosses(map, bosses) {\n        let bossesInterval = Math.floor(mapHeight / bosses);\n        let bossVar = 0;\n\n        while (bossVar < mapHeight - 1) {\n            let bossY = getRandomNumber(bossVar + 1, bossVar + (bossesInterval - 1) - BOSS_SIZE);\n            let bossX = getRandomNumber(0, (mapWidth - 1) - BOSS_SIZE);\n\n            for (let bw = 1; bw < 4; bw++) {\n                map[bossY][bossX] = BOSS_WALL;\n                map[bossY + bw][bossX] = BOSS_WALL;\n                map[bossY][bossX + bw] = BOSS_WALL;\n                map[bossY + bw][bossX + 3] = BOSS_WALL;\n                map[bossY + 3][bossX + bw] = BOSS_WALL;\n            }\n            for (let b = 1; b < 3; b++) {\n                map[bossY + 1][bossX + b] = BOSS;\n                map[bossY + 2][bossX + b] = BOSS;\n            }\n            bossVar += bossesInterval;\n        }\n    }\n\n    return (\n        <div className=\"start-container\">\n            <h1>Dungeon Crawl</h1>\n            <div className=\"start-menu\">\n                <button type=\"button\" onClick={_startGame}>Start Game</button>\n                <button type=\"button\" onClick={showSettings}>Settings</button>\n                <button type=\"button\" onClick={showTopResults}>Top Results</button>\n            </div>\n        </div>\n    );\n}\n\nStartMenu.propTypes = {\n    CERTIFICATES: PropTypes.number.isRequired,\n    BOSSES: PropTypes.number.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportWidth: PropTypes.number.isRequired,\n    generateItems: PropTypes.func.isRequired,\n    getRandomNumber: PropTypes.func.isRequired,\n    startGame: PropTypes.func.isRequired,\n    showSettings: PropTypes.func.isRequired,\n    showTopResults: PropTypes.func.isRequired,\n};\n\nexport default StartMenu;","import {connect} from 'react-redux';\nimport ActionsGame from \"../actions/game\";\nimport ActionsSettings from \"../actions/settings\";\nimport ActionsTopResults from \"../actions/topResults\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport StartMenu from \"../components/StartMenu\";\n\nconst mapStateToProps = state => {\n    return {\n        CERTIFICATES: gameOptions.CERTIFICATES,\n        BOSSES: gameOptions.BOSSES,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportWidth: state.settings.viewportWidth,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        startGame: ({map, playerX}) => dispatch(ActionsGame[\"GAME/START_GAME\"]({map, playerX})),\n        showSettings: () => dispatch(ActionsSettings[\"SETTINGS/SHOW_SETTINGS\"]()),\n        showTopResults: () => dispatch(ActionsTopResults[\"TOP_RESULTS/SHOW_TOP_RESULTS\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StartMenu);","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Game(\n    {\n        CERTIFICATES,\n        SKILLS,\n\n        gameMap,\n        currentCertificates,\n        currentSkills,\n        isDefeatedBoss,\n        level,\n        points,\n        currentOffsetX,\n        currentOffsetY,\n        playerX,\n        playerY,\n\n        difficulty,\n        mapWidth,\n        mapHeight,\n        viewportWidth,\n        viewportHeight,\n\n        playerName,\n        isPlayerNameError,\n\n        moveLeft,\n        moveUp,\n        moveRight,\n        moveDown,\n        changeOffsetX,\n        changeOffsetY,\n        addCertificate,\n        startLevel2,\n        addSkill,\n        removeBossWalls,\n        addPointsBoss,\n        quitGame,\n        endGame,\n\n        onPlayerNameChange,\n        saveResult,\n        playerNameError,\n\n        windowWidth,\n        windowHeight,\n        generateItems,\n    }\n) {\n    const [message, setMessage] = useState('');\n\n    const EMPTY = 'empty';\n    const WALL = 'wall';\n    const BOSS_WALL = 'boss-wall';\n    const BOSS = 'boss';\n    const SKILL = 'skill';\n    const CERTIFICATE = 'certificate';\n\n    const BEFORE_BORDER = 3;\n\n    const ARROW_LEFT = 'ArrowLeft';\n    const ARROW_UP = 'ArrowUp';\n    const ARROW_RIGHT = 'ArrowRight';\n    const ARROW_DOWN = 'ArrowDown';\n    const ESCAPE = 'Escape';\n\n    const squareWidth = Math.floor((windowWidth * 91) / (100 * viewportWidth));\n    const squareHeight = Math.floor((windowHeight * 51) / (100 * viewportHeight));\n\n    let squareSize = 0;\n    squareWidth < squareHeight ? squareSize = squareWidth : squareSize = squareHeight;\n\n    useEffect(() => {\n        if (!isDefeatedBoss) {\n            function handleWindowKeyDown(e) {\n                switch (e.key) {\n                    case ARROW_LEFT:\n                        if (playerX === 0 && gameMap[playerY][mapWidth - 1] !== WALL && gameMap[playerY][mapWidth - 1] !== BOSS_WALL) {\n                            changeOffsetX((mapWidth - 1) - (viewportWidth - 1) );\n                            addItems(gameMap[playerY][mapWidth - 1]);\n                            moveLeft(mapWidth - 1);\n                            break;\n                        }\n                        if (playerX !== 0 && gameMap[playerY][playerX - 1] !== WALL && gameMap[playerY][playerX - 1] !== BOSS_WALL) {\n                            if ((playerX <= BEFORE_BORDER + currentOffsetX) && !(playerX <= BEFORE_BORDER)) {\n                                changeOffsetX(currentOffsetX - 1);\n                            }\n                            addItems(gameMap[playerY][playerX - 1]);\n                            moveLeft(playerX - 1);\n                            break;\n                        }\n                        break;\n                    case ARROW_UP:\n                        if (playerY === 0) {\n                            break;\n                        }\n                        if (gameMap[playerY - 1][playerX] !== WALL && gameMap[playerY - 1][playerX] !== BOSS_WALL) {\n                            if ((playerY <= BEFORE_BORDER + currentOffsetY) && !(playerY <= BEFORE_BORDER)) {\n                                changeOffsetY(currentOffsetY - 1);\n                            }\n                            addItems(gameMap[playerY - 1][playerX]);\n                            moveUp(playerY - 1);\n                            break;\n                        }\n                        break;\n                    case ARROW_RIGHT:\n                        if (playerX === mapWidth - 1 && gameMap[playerY][0] !== WALL && gameMap[playerY][0] !== BOSS_WALL) {\n                            changeOffsetX(0);\n                            addItems(gameMap[playerY][0]);\n                            moveLeft(0);\n                            break;\n                        }\n                        if (playerX !== mapWidth - 1 && gameMap[playerY][playerX + 1] !== WALL && gameMap[playerY][playerX + 1] !== BOSS_WALL) {\n                            if ((playerX >= (viewportWidth - 1) - BEFORE_BORDER + currentOffsetX) && !(playerX >= (mapWidth - 1) - BEFORE_BORDER)) {\n                                changeOffsetX(currentOffsetX + 1);\n                            }\n                            addItems(gameMap[playerY][playerX + 1]);\n                            moveRight(playerX + 1);\n                            break;\n                        }\n                        break;\n                    case ARROW_DOWN:\n                        if (playerY === gameMap.length - 1) {\n                            break;\n                        }\n                        if (gameMap[playerY + 1][playerX] !== WALL && gameMap[playerY + 1][playerX] !== BOSS_WALL) {\n                            if ((playerY >= (viewportHeight - 1) - BEFORE_BORDER + currentOffsetY) && !(playerY >= (mapHeight - 1) - BEFORE_BORDER)) {\n                                changeOffsetY(currentOffsetY + 1);\n                            }\n                            addItems(gameMap[playerY + 1][playerX]);\n                            moveDown(playerY + 1);\n                            break;\n                        }\n                        break;\n                    case ESCAPE:\n                        _quitGame()\n                        break;\n                    default: break;\n                }\n            }\n\n            window.addEventListener('keydown', handleWindowKeyDown);\n            return () => window.removeEventListener('keydown', handleWindowKeyDown);\n        }\n    }, [playerX, playerY]);\n\n    useEffect(() => {\n        timeoutFunc(currentCertificates,'+1 certificate', 500);\n    },[currentCertificates]);\n\n    useEffect(() => {\n        timeoutFunc(currentSkills,'+1 skill', 500);\n    },[currentSkills]);\n\n    function timeoutFunc(item, messageText, time) {\n        if (item > 0) {\n            setMessage(messageText);\n            const timeout = setTimeout(() => {\n                setMessage('');\n            }, time);\n\n            return () => clearTimeout(timeout);\n        }\n    }\n\n    function addItems(mapCoordinates) {\n        if (mapCoordinates.replace(/[0-9]/g, '') === CERTIFICATE) {\n            if (currentCertificates === CERTIFICATES - 1) {\n                let map = gameMap.slice();\n                generateItems(map, SKILLS, SKILL);\n                startLevel2({map});\n            }\n            addCertificate(Math.round(calculatePoints(10)));\n        }\n        if (mapCoordinates.replace(/[0-9]/g, '') === SKILL) {\n            if (currentSkills === SKILLS - 1) {\n                let map = gameMap.slice();\n                map.forEach((rowMap, rowIndex) => rowMap.forEach((square, squareIndex) => {\n                    if (square === BOSS_WALL) {\n                        map[rowIndex][squareIndex] = EMPTY;\n                    }\n                }));\n                removeBossWalls({map});\n            }\n            addSkill(Math.round(calculatePoints(100)));\n        }\n        if (mapCoordinates === BOSS) {\n            addPointsBoss(Math.round(calculatePoints(300)));\n            endGame();\n        }\n    }\n\n    function calculatePoints(factor) {\n        return (factor * difficulty * (mapWidth / 100) * (mapHeight / 100) * (10 / viewportWidth) * (10 / viewportHeight))\n    }\n\n    function _quitGame() {\n        if (window.confirm('Are you sure you want to quit?')) {\n            quitGame();\n        }\n    }\n\n    function _saveResult(e) {\n        e.preventDefault();\n        if (playerName.trim()) {\n            saveResult();\n            quitGame();\n        } else {\n            playerNameError();\n        }\n    }\n\n    function renderMap() {\n        let visibleMap = [];\n\n        for (let y = currentOffsetY; y < currentOffsetY + viewportHeight; y++) {\n            let visibleRowsMap = gameMap[y].slice(currentOffsetX, currentOffsetX + viewportWidth);\n            visibleMap.push(visibleRowsMap);\n        }\n\n        return (\n            visibleMap.map((rowMap, rowIndex) => {\n                return (\n                    <div className={\n                        rowIndex + currentOffsetY === 0 ? \"row-map first\" : rowIndex + currentOffsetY === (mapHeight - 1) ? \"row-map last\" : \"row-map\"\n                    } key={rowIndex + currentOffsetY}>\n                        {\n                            rowMap.map((square, squareIndex) => {\n                                return (\n                                    <div\n                                        className={`square ${square.replace(/[0-9]/g, '')}`}\n                                        key={`${rowIndex + currentOffsetY}${squareIndex + currentOffsetX}`}\n                                        style={{width: `${squareSize}px`, height: `${squareSize}px`}}\n                                    >\n                                        {\n                                            (square !== EMPTY) && <img\n                                                src={process.env.PUBLIC_URL + `/images/${square}.png`}\n                                                alt={square.replace(/[0-9]/g, '')}\n                                                style={{width: `${squareSize}px`, height: `${squareSize}px`}}\n                                            />\n                                        }\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            })\n        );\n    }\n\n    function renderGameOver() {\n        return (\n            <div className=\"game-over\">\n                <p>Congratulations!</p>\n                <p>You left the dungeon!</p>\n                <p className=\"result\">Your result: {points} points.</p>\n                <form className=\"result-form\" onSubmit={_saveResult}>\n                    <input\n                        type=\"text\"\n                        placeholder={isPlayerNameError ? \"Cannot Be Empty\" : \"Enter Your Name\"}\n                        value={playerName}\n                        onChange={onPlayerNameChange}\n                    />\n                    <button type=\"submit\" className=\"btn-save\">Save & Exit</button>\n                </form>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"top-bar-head\">\n                <h2>Dungeon Crawl</h2>\n                <button className=\"btn-quit\" type=\"text\" onClick={_quitGame}>Quit Game</button>\n            </div>\n            <div className=\"top-bar\">\n                <div className=\"top-bar-stats\">\n                    <div>Level: <span>{level}</span></div>\n                    <div>\n                        <p>Certificates: <span>{currentCertificates}/{CERTIFICATES}</span></p>\n                        <progress value={currentCertificates} max={CERTIFICATES}></progress>\n                    </div>\n                    <div>\n                        <p>Skills: <span>{currentSkills}/{SKILLS}</span></p>\n                        <progress value={currentSkills} max={SKILLS}></progress>\n                    </div>\n                    <div>Points: <span>{points}</span></div>\n                </div>\n                <div className=\"messages\">\n                    <p>{message}</p>\n                    { level === 1 && <p>Collect 25 certificates.</p> }\n                    { level === 2 && currentSkills < SKILLS && <p>Collect 3 skills.</p> }\n                    { level === 2 && currentSkills === SKILLS && !isDefeatedBoss && <p>Find the boss.</p> }\n                </div>\n            </div>\n            <div className=\"map\">\n                { !isDefeatedBoss ? renderMap() : renderGameOver() }\n            </div>\n            <div className=\"bottom-bar\">\n                <div>\n                    <p>Press 'Arrows' on the keyboard to move.</p>\n                    <p>Press 'Esc' to quit the game or click the button at the top right.</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nGame.propTypes = {\n    CERTIFICATES: PropTypes.number.isRequired,\n    SKILLS: PropTypes.number.isRequired,\n    gameMap: PropTypes.arrayOf(PropTypes.array).isRequired,\n    currentCertificates: PropTypes.number.isRequired,\n    currentSkills: PropTypes.number.isRequired,\n    isDefeatedBoss: PropTypes.bool.isRequired,\n    level: PropTypes.number.isRequired,\n    points: PropTypes.number.isRequired,\n    currentOffsetX: PropTypes.number.isRequired,\n    currentOffsetY: PropTypes.number.isRequired,\n    playerX: PropTypes.number.isRequired,\n    playerY: PropTypes.number.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportWidth: PropTypes.number.isRequired,\n    viewportHeight: PropTypes.number.isRequired,\n    playerName: PropTypes.string.isRequired,\n    isPlayerNameError: PropTypes.bool.isRequired,\n    moveLeft: PropTypes.func.isRequired,\n    moveUp: PropTypes.func.isRequired,\n    moveRight: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n    changeOffsetX: PropTypes.func.isRequired,\n    changeOffsetY: PropTypes.func.isRequired,\n    addCertificate: PropTypes.func.isRequired,\n    startLevel2: PropTypes.func.isRequired,\n    addSkill: PropTypes.func.isRequired,\n    removeBossWalls: PropTypes.func.isRequired,\n    addPointsBoss: PropTypes.func.isRequired,\n    quitGame: PropTypes.func.isRequired,\n    endGame: PropTypes.func.isRequired,\n    onPlayerNameChange: PropTypes.func.isRequired,\n    saveResult: PropTypes.func.isRequired,\n    playerNameError: PropTypes.func.isRequired,\n    windowWidth: PropTypes.number.isRequired,\n    windowHeight: PropTypes.number.isRequired,\n    generateItems: PropTypes.func.isRequired,\n};\n\nexport default Game;","import {connect} from 'react-redux';\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport ActionsGame from \"../actions/game\";\nimport ActionsTopResults from \"../actions/topResults\";\nimport Game from \"../components/Game\";\n\nconst mapStateToProps = state => {\n    return {\n        CERTIFICATES: gameOptions.CERTIFICATES,\n        SKILLS: gameOptions.SKILLS,\n\n        gameMap: state.game.map,\n        currentCertificates: state.game.certificates,\n        currentSkills: state.game.skills,\n        isDefeatedBoss: state.game.isDefeatedBoss,\n        level: state.game.level,\n        points: state.game.points,\n        currentOffsetX: state.game.currentOffsetX,\n        currentOffsetY: state.game.currentOffsetY,\n        playerX: state.game.playerX,\n        playerY: state.game.playerY,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportWidth: state.settings.viewportWidth,\n        viewportHeight: state.settings.viewportHeight,\n\n        playerName: state.topResults.playerName,\n        isPlayerNameError: state.topResults.isPlayerNameError,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        moveLeft: (newPlayerX) => dispatch(ActionsGame[\"GAME/MOVE_LEFT\"](newPlayerX)),\n        moveUp: (newPlayerY) => dispatch(ActionsGame[\"GAME/MOVE_UP\"](newPlayerY)),\n        moveRight: (newPlayerX) => dispatch(ActionsGame[\"GAME/MOVE_RIGHT\"](newPlayerX)),\n        moveDown: (newPlayerY) => dispatch(ActionsGame[\"GAME/MOVE_DOWN\"](newPlayerY)),\n        changeOffsetX: (currentOffsetX) => dispatch(ActionsGame[\"GAME/CHANGE_OFFSET_X\"](currentOffsetX)),\n        changeOffsetY: (currentOffsetY) => dispatch(ActionsGame[\"GAME/CHANGE_OFFSET_Y\"](currentOffsetY)),\n        addCertificate: (points) => dispatch(ActionsGame[\"GAME/ADD_CERTIFICATE\"](points)),\n        startLevel2: ({map}) => dispatch(ActionsGame[\"GAME/START_LEVEL2\"]({map})),\n        addSkill: (points) => dispatch(ActionsGame[\"GAME/ADD_SKILL\"](points)),\n        removeBossWalls: ({map}) => dispatch(ActionsGame[\"GAME/REMOVE_BOSS_WALLS\"]({map})),\n        addPointsBoss: (points) => dispatch(ActionsGame[\"GAME/ADD_POINTS_BOSS\"](points)),\n        quitGame: () => dispatch(ActionsGame[\"GAME/QUIT_GAME\"]()),\n        endGame: () => dispatch(ActionsGame[\"GAME/END_GAME\"]()),\n\n        onPlayerNameChange: (e) => dispatch(ActionsTopResults[\"TOP_RESULTS/PLAYER_NAME_CHANGED\"](e)),\n        saveResult: () => dispatch(ActionsTopResults[\"TOP_RESULTS/SAVE_RESULT\"]()),\n        playerNameError: () => dispatch(ActionsTopResults[\"TOP_RESULTS/PLAYER_NAME_ERROR\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Game);","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Settings(\n    {\n        difficultyOptions,\n\n        difficulty,\n        mapWidth,\n        mapHeight,\n        viewportWidth,\n        viewportHeight,\n\n        backToStartMenu,\n\n        saveSettings,\n\n        viewportWidthMax,\n        viewportHeightMax,\n    }\n) {\n    const [difficultyLocal, setDifficultyLocal] = useState(difficulty);\n    const [mapWidthLocal, setMapWidthLocal] = useState(mapWidth);\n    const [mapHeightLocal, setMapHeightLocal] = useState(mapHeight);\n    const [viewportWidthLocal, setViewportWidthLocal] = useState(viewportWidth);\n    const [viewportHeightLocal, setViewportHeightLocal] = useState(viewportHeight);\n\n    const DIFFICULTY = 'Difficulty';\n    const MAP_WIDTH = 'Map Width';\n    const MAP_HEIGHT = 'Map Height';\n    const VIEWPORT_WIDTH = 'Viewport Width';\n    const VIEWPORT_HEIGHT = 'Viewport Height';\n\n    function _change(name, e) {\n        switch(name) {\n            case DIFFICULTY: setDifficultyLocal(+e.target.value); break;\n            case MAP_WIDTH: setMapWidthLocal(+e.target.value); break;\n            case MAP_HEIGHT: setMapHeightLocal(+e.target.value); break;\n            case VIEWPORT_WIDTH: setViewportWidthLocal(+e.target.value); break;\n            case VIEWPORT_HEIGHT: setViewportHeightLocal(+e.target.value); break;\n            default: break;\n        }\n    }\n\n    function _saveSettings(e) {\n        e.preventDefault();\n        saveSettings({\n            difficultyLocal,\n            mapWidthLocal,\n            mapHeightLocal,\n            viewportWidthLocal,\n            viewportHeightLocal,\n        });\n    }\n\n    return (\n        <div className=\"settings\">\n            <div className=\"top-bar-head\">\n                <h3>Settings</h3>\n                <button className=\"btn-back\" type=\"text\" onClick={backToStartMenu}>Back</button>\n            </div>\n            <form className=\"settings-form\" onSubmit={_saveSettings}>\n                <div>\n                    <label htmlFor=\"difficulty\">Difficulty:</label>\n                    <select id=\"difficulty\" value={difficultyLocal} onChange={_change.bind(this, DIFFICULTY)}>\n                        <option value={difficultyOptions.easy}>Easy</option>\n                        <option value={difficultyOptions.medium}>Medium</option>\n                        <option value={difficultyOptions.hard}>Hard</option>\n                    </select>\n                </div>\n                <div>\n                    <label htmlFor=\"map-width\">Map Width <small>(20 - 200)</small>:</label>\n                    <input\n                        id=\"map-width\"\n                        type=\"number\"\n                        value={mapWidthLocal}\n                        min=\"20\"\n                        max=\"200\"\n                        step=\"5\"\n                        onChange={_change.bind(this, MAP_WIDTH)}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"map-height\">Map Height <small>(50 - 500)</small>:</label>\n                    <input\n                        id=\"map-height\"\n                        type=\"number\"\n                        value={mapHeightLocal}\n                        min=\"50\"\n                        max=\"500\"\n                        step=\"5\"\n                        onChange={_change.bind(this, MAP_HEIGHT)}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"viewport-width\">Viewport Width <small>(10 - {mapWidth <= viewportWidth ? mapWidth : viewportWidthMax})</small>:</label>\n                    <input\n                        id=\"viewport-width\"\n                        type=\"number\"\n                        value={viewportWidthLocal}\n                        min=\"10\"\n                        max={mapWidth <= viewportWidth ? mapWidth : viewportWidthMax}\n                        step=\"1\"\n                        onChange={_change.bind(this, VIEWPORT_WIDTH)}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"viewport-height\">Viewport Height <small>(10 - {viewportHeightMax})</small>:</label>\n                    <input\n                        id=\"viewport-height\"\n                        type=\"number\"\n                        value={viewportHeightLocal}\n                        min=\"10\"\n                        max={viewportHeightMax}\n                        step=\"1\"\n                        onChange={_change.bind(this, VIEWPORT_HEIGHT)}\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn-save\">Save</button>\n            </form>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    difficultyOptions: PropTypes.object.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportWidth: PropTypes.number.isRequired,\n    viewportHeight: PropTypes.number.isRequired,\n    backToStartMenu: PropTypes.func.isRequired,\n    saveSettings: PropTypes.func.isRequired,\n    viewportWidthMax: PropTypes.number.isRequired,\n    viewportHeightMax: PropTypes.number.isRequired,\n};\n\nexport default Settings;","import {connect} from 'react-redux';\nimport ActionsSettings from \"../actions/settings\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport Settings from \"../components/Settings\";\n\nconst mapStateToProps = state => {\n    return {\n        difficultyOptions: gameOptions.DIFFICULTY,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportWidth: state.settings.viewportWidth,\n        viewportHeight: state.settings.viewportHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        backToStartMenu: () => dispatch(ActionsSettings[\"SETTINGS/HIDE_SETTINGS\"]()),\n        saveSettings: (\n            {\n                difficultyLocal,\n                mapWidthLocal,\n                mapHeightLocal,\n                viewportWidthLocal,\n                viewportHeightLocal,\n            }\n        ) => dispatch(ActionsSettings[\"SETTINGS/SAVE_SETTINGS\"](\n            {\n                difficultyLocal,\n                mapWidthLocal,\n                mapHeightLocal,\n                viewportWidthLocal,\n                viewportHeightLocal,\n            }\n        )),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Settings);","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TopResults({topResults, getResults, backToStartMenu}) {\n\n    useEffect(() => {\n        getResults();\n    }, []);\n\n    function renderTopResults() {\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th>No.</th>\n                        <th>Name</th>\n                        <th>Points</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        topResults.map((result, index) => {\n                            return (\n                                <tr key={result.id}>\n                                    <td className=\"position\">{index + 1}.</td>\n                                    <td className=\"player-name\">{result.name}</td>\n                                    <td className=\"points\">{result.points}</td>\n                                </tr>\n                            );\n                        })\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    return (\n        <div className=\"top-results\">\n            <div className=\"top-bar-head\">\n                <h3>Top Results</h3>\n                <button className=\"btn-back\" type=\"text\" onClick={backToStartMenu}>Back</button>\n            </div>\n            <div className=\"top-results-body\">\n                {topResults.length ? renderTopResults() : <p className=\"no-results\">There are no results yet.</p>}\n            </div>\n        </div>\n    );\n}\n\nTopResults.propTypes = {\n    topResults: PropTypes.arrayOf(PropTypes.object).isRequired,\n    getResults: PropTypes.func.isRequired,\n    backToStartMenu: PropTypes.func.isRequired,\n};\n\nexport default TopResults;","import {connect} from 'react-redux';\nimport ActionsTopResults from \"../actions/topResults\";\nimport TopResults from \"../components/TopResults\";\n\nconst mapStateToProps = state => {\n    return {\n        topResults: state.topResults.topResults,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        getResults: () => dispatch(ActionsTopResults[\"TOP_RESULTS/GET_RESULTS\"]()),\n        backToStartMenu: () => dispatch(ActionsTopResults[\"TOP_RESULTS/HIDE_TOP_RESULTS\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(TopResults);","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport StartMenu from \"./containers/StartMenu\";\nimport Game from \"./containers/Game\";\nimport Settings from \"./containers/Settings\";\nimport TopResults from \"./containers/TopResults\";\n\nfunction App({gameOn, isSettingsShow, mapWidth, mapHeight, isTopResultsShow, getSettings}) {\n\n    const EMPTY = 'empty';\n    const WALL = 'wall';\n    const BOSS_WALL = 'boss-wall';\n\n    const MIN_SQUARE_SIZE = 25;\n\n    const windowWidth = document.documentElement.clientWidth;\n    const windowHeight = document.documentElement.clientHeight;\n    const viewportWidthMax = 10 * Math.floor((windowWidth * 9.1) / (100 * MIN_SQUARE_SIZE));\n    const viewportHeightMax = 10 * Math.floor((windowHeight * 5.1) / (100 * MIN_SQUARE_SIZE));\n\n    useEffect(() => {\n        getSettings();\n    }, []);\n\n    function generateItems(map, items, itemClass) {\n        let itemsInterval = Math.floor(mapHeight / items);\n        let itemIncrement = 0;\n        let itemVar = 0;\n        let itemsBalance = 0;\n\n        if (mapHeight % items !== 0) {\n            itemVar = 1;\n            itemsBalance = Math.ceil((mapHeight % items)) - 1;\n        }\n\n        while (itemVar < mapHeight) {\n            let itemY = getRandomNumber(itemVar, itemVar + itemsInterval - 1);\n            let itemX = getRandomNumber(0, mapWidth - 1);\n\n            if ( (map[itemY][itemX] === EMPTY) &&\n                !(\n                    !(itemX === 0) && !(itemX === mapWidth - 1) && !(itemY === 0) && !(itemY === mapHeight - 1) &&\n                    isWall(itemY, itemX - 1) && isWall(itemY, itemX + 1) && isWall(itemY - 1, itemX) && isWall(itemY + 1, itemX)\n                ) &&\n                !(\n                    (itemY === 0) && (itemX === 0) &&\n                    isWall(itemY, itemX + 1) && isWall(itemY + 1, itemX) && isWall(itemY, mapWidth - 1)\n                ) &&\n                !(\n                    (itemY === 0) && (itemX === mapWidth - 1) &&\n                    isWall(itemY, itemX - 1) && isWall(itemY + 1, itemX) && isWall(itemY, 0)\n                ) &&\n                !(\n                    (itemY === mapHeight - 1) && (itemX === mapWidth - 1) &&\n                    isWall(itemY, itemX - 1) && isWall(itemY - 1, itemX) && isWall(itemY, 0)\n                ) &&\n                !(\n                    (itemY === mapHeight - 1) && (itemX === 0) &&\n                    isWall(itemY, itemX + 1) && isWall(itemY - 1, itemX) && isWall(itemY, mapWidth - 1)\n                ) &&\n                !(\n                    (itemY === 0) && !(itemX === 0) && !(itemX === mapWidth - 1) &&\n                    isWall(itemY, itemX - 1) && isWall(itemY, itemX + 1) && isWall(itemY + 1, itemX)\n                ) &&\n                !(\n                    (itemY === mapHeight - 1) && !(itemX === 0) && !(itemX === mapWidth - 1) &&\n                    isWall(itemY, itemX - 1) && isWall(itemY, itemX + 1) && isWall(itemY - 1, itemX)\n                ) &&\n                !(\n                    (itemX === 0) && !(itemY === 0) && !(itemY === mapHeight - 1) &&\n                    isWall(itemY, itemX + 1) && isWall(itemY + 1, itemX) && isWall(itemY - 1, itemX)\n                ) &&\n                !(\n                    (itemX === mapWidth - 1) && !(itemY === 0) && !(itemY === mapHeight - 1) &&\n                    isWall(itemY, itemX - 1) && isWall(itemY + 1, itemX) && isWall(itemY - 1, itemX)\n                )\n            ) {\n                map[itemY][itemX] = `${itemClass}${itemIncrement}`;\n                itemIncrement++;\n\n                if (itemsBalance > 0) {\n                    itemVar += itemsInterval + 1;\n                    itemsBalance--;\n                } else if (itemsBalance === 0) {\n                    itemVar += itemsInterval;\n                }\n            }\n        }\n\n        function isWall(y, x) {\n            return (map[y][x] === WALL || map[y][x] === BOSS_WALL);\n        }\n    }\n\n    function getRandomNumber(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    return (\n        <div style={{height: windowHeight + 'px'}}>\n            { (!gameOn && !isSettingsShow && !isTopResultsShow) && <StartMenu generateItems={generateItems} getRandomNumber={getRandomNumber}/> }\n            { gameOn && <Game windowWidth={windowWidth} windowHeight={windowHeight} generateItems={generateItems}/> }\n            { isSettingsShow && <Settings viewportWidthMax={viewportWidthMax} viewportHeightMax={viewportHeightMax} /> }\n            { isTopResultsShow && <TopResults /> }\n        </div>\n    );\n}\n\nApp.propTypes = {\n    gameOn: PropTypes.bool,\n    isSettingsShow: PropTypes.bool,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    isTopResultsShow: PropTypes.bool.isRequired,\n    getSettings: PropTypes.func.isRequired,\n};\n\nexport default App;","import {connect} from 'react-redux';\nimport App from \"../App\";\nimport ActionsSettings from \"../actions/settings\";\n\nconst mapStateToProps = state => {\n    return {\n        gameOn: state.game.gameOn,\n\n        isSettingsShow: state.settings.isSettingsShow,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n\n        isTopResultsShow: state.topResults.isTopResultsShow,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        getSettings: () => dispatch(ActionsSettings[\"SETTINGS/GET_SETTINGS\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\nimport ActionsGame from './../actions/game';\n\nconst initialState = {\n    gameOn: false,\n    map: [],\n    certificates: 0,\n    skills: 0,\n    isDefeatedBoss: false,\n    level: 0,\n    points: 0,\n    currentOffsetX: 0,\n    currentOffsetY: 0,\n    playerX: 0,\n    playerY: 0,\n};\n\nconst gameReducer = handleActions({\n    [ActionsGame['GAME/START_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                gameOn: true,\n                map: action.payload.map,\n                level: 1,\n                playerX: action.payload.playerX,\n            }\n        });\n    },\n    [ActionsGame['GAME/MOVE_LEFT']]: (state, action) => {\n        return update(state, {\n            map: {\n                 [state.playerY]: {[state.playerX]: {$set: 'empty'}, [action.payload]: {$set: 'player'}},\n            },\n            playerX: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_UP']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}},\n                [action.payload]: {[state.playerX]: {$set: 'player'}}\n            },\n            playerY: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_RIGHT']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}, [action.payload]: {$set: 'player'}},\n            },\n            playerX: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_DOWN']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}},\n                [action.payload]: {[state.playerX]: {$set: 'player'}}\n            },\n            playerY: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/CHANGE_OFFSET_X']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                currentOffsetX: action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/CHANGE_OFFSET_Y']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                currentOffsetY: action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_CERTIFICATE']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                certificates: state.certificates + 1,\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/START_LEVEL2']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                map: action.payload.map,\n                level: 2,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_SKILL']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                skills: state.skills + 1,\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/REMOVE_BOSS_WALLS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                map: action.payload.map,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_POINTS_BOSS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/QUIT_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                gameOn: initialState.gameOn,\n                map: initialState.map,\n                certificates: initialState.certificates,\n                skills: initialState.skills,\n                isDefeatedBoss: initialState.isDefeatedBoss,\n                level: initialState.level,\n                points: initialState.points,\n                currentOffsetX: initialState.currentOffsetX,\n                currentOffsetY: initialState.currentOffsetY,\n                playerX: initialState.playerX,\n                playerY: initialState.playerY,\n            }\n        });\n    },\n    [ActionsGame['GAME/END_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isDefeatedBoss: true,\n            }\n        });\n    },\n}, initialState);\n\nexport default gameReducer;","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\nimport ActionsSettings from './../actions/settings';\n\nconst initialState = {\n    isSettingsShow: false,\n    difficulty: 20,\n    mapWidth: 20,\n    mapHeight: 100,\n    viewportWidth: 20,\n    viewportHeight: 10,\n};\n\nconst settingsReducer = handleActions({\n    [ActionsSettings['SETTINGS/SHOW_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isSettingsShow: true,\n            }\n        });\n    },\n    [ActionsSettings['SETTINGS/HIDE_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isSettingsShow: false,\n            }\n        });\n    },\n    [ActionsSettings['SETTINGS/GET_SETTINGS_SUCCESSFULLY']]: (state, action) => {\n        if (action.payload !== null) {\n            return update(state, {\n                $merge: {\n                    difficulty: action.payload.difficultyLocal,\n                    mapWidth: action.payload.mapWidthLocal,\n                    mapHeight: action.payload.mapHeightLocal,\n                    viewportWidth: action.payload.viewportWidthLocal,\n                    viewportHeight: action.payload.viewportHeightLocal,\n                }\n            });\n        }\n    },\n    [ActionsSettings['SETTINGS/SAVE_SETTINGS_SUCCESSFULLY']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                difficulty: action.payload.difficultyLocal,\n                mapWidth: action.payload.mapWidthLocal,\n                mapHeight: action.payload.mapHeightLocal,\n                viewportWidth: action.payload.viewportWidthLocal,\n                viewportHeight: action.payload.viewportHeightLocal,\n            }\n        });\n    },\n}, initialState);\n\nexport default settingsReducer;","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\nimport ActionsTopResults from './../actions/topResults';\n\nconst initialState = {\n    isTopResultsShow: false,\n    playerName: '',\n    isPlayerNameError: false,\n    topResults: [],\n};\n\nconst topResultsReducer = handleActions({\n    [ActionsTopResults['TOP_RESULTS/SHOW_TOP_RESULTS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isTopResultsShow: true,\n            }\n        });\n    },\n    [ActionsTopResults['TOP_RESULTS/HIDE_TOP_RESULTS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isTopResultsShow: false,\n            }\n        });\n    },\n    [ActionsTopResults['TOP_RESULTS/PLAYER_NAME_CHANGED']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                playerName: action.payload.target.value,\n                isPlayerNameError: initialState.isPlayerNameError,\n            }\n        });\n    },\n    [ActionsTopResults['TOP_RESULTS/GET_RESULTS_SUCCESSFULLY']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                topResults: action.payload,\n            }\n        });\n    },\n    [ActionsTopResults['TOP_RESULTS/SAVE_RESULT_SUCCESSFULLY']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                topResults: action.payload,\n            }\n        });\n    },\n    [ActionsTopResults['TOP_RESULTS/PLAYER_NAME_ERROR']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isPlayerNameError: true,\n            }\n        });\n    },\n}, initialState);\n\nexport default topResultsReducer;","import { combineReducers } from 'redux'\n\nimport game from './game';\nimport settings from './settings';\nimport topResults from './topResults';\n\nexport default combineReducers({ game, settings, topResults });","const DUNGEON_CRAWL_SETTINGS_KEY = 'DUNGEON_CRAWL_SETTINGS_KEY';\n\nclass SettingsService {\n    get() {\n        const localSettingsRaw = window.localStorage.getItem(DUNGEON_CRAWL_SETTINGS_KEY);\n\n        return JSON.parse(localSettingsRaw);\n    }\n\n    save(settings) {\n        window.localStorage.setItem(DUNGEON_CRAWL_SETTINGS_KEY, JSON.stringify(settings));\n\n        return settings;\n    }\n}\n\nexport default new SettingsService();","import {call, put, takeLatest, all} from 'redux-saga/effects';\nimport settingsService from \"../services/settingsService\";\nimport ActionsSettings from \"../actions/settings\";\n\nfunction* getSettings() {\n    try {\n        let localSettings = yield call(settingsService.get);\n\n        yield put(ActionsSettings['SETTINGS/GET_SETTINGS_SUCCESSFULLY'](localSettings));\n    } catch ({message}) {\n        yield put(ActionsSettings['SETTINGS/GET_SETTINGS_ERROR']({message}));\n    }\n}\n\nfunction* saveSettings(action) {\n    try {\n        let localSettings = yield call(settingsService.save, action.payload);\n\n        yield put(ActionsSettings['SETTINGS/SAVE_SETTINGS_SUCCESSFULLY'](localSettings));\n    } catch ({message}) {\n        yield put(ActionsSettings['SETTINGS/SAVE_SETTINGS_ERROR']({message}));\n    }\n}\n\nfunction* getSettingsSaga() {\n    yield takeLatest('SETTINGS/GET_SETTINGS', getSettings);\n}\n\nfunction* saveSettingsSaga() {\n    yield takeLatest('SETTINGS/SAVE_SETTINGS', saveSettings);\n}\n\nexport default function* settingsSaga() {\n    yield all([\n        getSettingsSaga(),\n        saveSettingsSaga(),\n    ]);\n};","import gameOptions from \"../gameOptions/gameOptions\";\n\nconst NUMBER_OF_RESULTS = gameOptions.NUMBER_OF_RESULTS;\n\nconst DUNGEON_CRAWL_TOP_RESULTS_KEY = 'DUNGEON_CRAWL_TOP_RESULTS_KEY';\n\nclass topResultsService {\n    get() {\n        let topResults = window.localStorage.getItem(DUNGEON_CRAWL_TOP_RESULTS_KEY);\n\n        if (!topResults) {\n            topResults = [];\n        } else {\n            topResults = JSON.parse(topResults);\n        }\n\n        return topResults;\n    }\n\n    save(topResults, name, points) {\n        if (!topResults) {\n            topResults.push({\n                id: Date.now(),\n                name,\n                points,\n            })\n        } else {\n            let index = 0;\n            topResults.forEach((result) => points < result.points && index++);\n            if (index < NUMBER_OF_RESULTS) {\n                topResults.splice(index,0, {id: Date.now(), name, points});\n            }\n            if (topResults.length > NUMBER_OF_RESULTS) {\n                topResults.pop();\n            }\n        }\n        window.localStorage.setItem(DUNGEON_CRAWL_TOP_RESULTS_KEY, JSON.stringify(topResults));\n\n        return topResults;\n    }\n}\n\nexport default new topResultsService();","import {call, put, takeLatest, all, select} from 'redux-saga/effects';\nimport topResultsService from \"../services/topResultsService\";\nimport ActionsTopResults from \"../actions/topResults\";\n\nfunction* getResults() {\n    try {\n        let topResults = yield call(topResultsService.get);\n\n        yield put(ActionsTopResults['TOP_RESULTS/GET_RESULTS_SUCCESSFULLY'](topResults));\n    } catch ({message}) {\n        yield put(ActionsTopResults['TOP_RESULTS/GET_RESULTS_ERROR']({message}));\n    }\n}\n\nfunction* saveResult() {\n    try {\n        let topResults = yield select(state => state.topResults.topResults);\n        let name = yield select(state => state.topResults.playerName);\n        let points = yield select(state => state.game.points);\n\n        let topResultsSaved = yield call(topResultsService.save, topResults, name, points);\n\n        yield put(ActionsTopResults['TOP_RESULTS/SAVE_RESULT_SUCCESSFULLY'](topResultsSaved));\n    } catch ({message}) {\n        yield put(ActionsTopResults['TOP_RESULTS/SAVE_RESULT_ERROR']({message}));\n    }\n}\n\nfunction* getResultsSaga() {\n    yield takeLatest('TOP_RESULTS/GET_RESULTS', getResults);\n}\n\nfunction* saveResultSaga() {\n    yield takeLatest('TOP_RESULTS/SAVE_RESULT', saveResult);\n}\n\nexport default function* topResultsSaga() {\n    yield all([\n        getResultsSaga(),\n        saveResultSaga(),\n    ]);\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducers';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger';\n\nimport createSagaMiddleware from 'redux-saga';\nimport settingsSaga from './sagas/settingsSaga';\nimport topResultsSaga from \"./sagas/topResultsSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, applyMiddleware(logger, sagaMiddleware));\n\nsagaMiddleware.run(settingsSaga);\nsagaMiddleware.run(topResultsSaga);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}