{"version":3,"sources":["actions/startMenu.js","gameOptions/gameOptions.js","components/StartMenu.js","containers/StartMenu.js","actions/game.js","components/Game.js","containers/Game.js","actions/settings.js","components/Settings.js","containers/Settings.js","App.js","containers/App.js","serviceWorker.js","reducers/settings.js","reducers/game.js","reducers/index.js","index.js"],"names":["createAction","DIFFICULTY","easy","medium","hard","CERTIFICATES","SKILLS","BOSSES","StartMenu","showSettings","startGame","certificates","bosses","difficulty","mapWidth","mapHeight","generateItems","getRandomNumber","className","type","onClick","playerX","map","generatedMap","numberOfWalls","Math","ceil","console","log","i","generatedRowMap","wallVar","randomSquare","j","push","bossesInterval","floor","bossVar","bossY","bossX","bw","b","generateBosses","generateMap","connect","state","gameOptions","settings","dispatch","ActionsStartMenu","Game","certificatesAll","skillsAll","gameMap","currentCertificates","currentSkills","isDefeatedBoss","level","points","currentOffset","playerY","viewportHeight","moveLeft","moveUp","moveRight","moveDown","changeOffset","addCertificate","startLevel2","addSkill","removeBossWalls","addPointsBoss","quitGame","endGame","useState","message","setMessage","timeoutFunc","item","messageText","time","timeout","setTimeout","clearTimeout","addItems","mapCoordinates","slice","round","forEach","rowMap","rowIndex","square","squareIndex","_quitGame","window","confirm","useEffect","handleWindowKeyDown","e","key","length","addEventListener","removeEventListener","value","max","visibleMap","index","visibleRowsMap","windowHeight","document","documentElement","clientHeight","squareSize","style","width","height","renderMap","game","skills","newPlayerX","ActionsGame","newPlayerY","Settings","difficultyOptions","viewportWidth","backToStartMenu","saveSettings","difficultyInner","setDifficultyInner","mapHeightInner","setMapHeightInner","viewportHeightInner","setViewportHeightInner","_change","name","target","onSubmit","preventDefault","htmlFor","id","onChange","bind","this","min","step","ActionsSettings","App","isSettingsShow","gameOn","items","itemClass","itemsInterval","itemVar","itemsBalance","itemY","itemX","random","Boolean","location","hostname","match","settingsReducer","handleActions","action","update","$merge","payload","initialState","gameReducer","$set","combineReducers","store","createStore","reducer","applyMiddleware","logger","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7c0ea5f1.chunk.js","sourcesContent":["import {createAction} from 'redux-actions';\n\nexport default {\n    'GAME/START_GAME': createAction('GAME/START_GAME'),\n\n    'SETTINGS/SHOW_SETTINGS': createAction('SETTINGS/SHOW_SETTINGS'),\n};","export default {\n    DIFFICULTY: {\n        easy: 20,\n        medium: 25,\n        hard: 30,\n    },\n    CERTIFICATES: 25,\n    SKILLS: 3,\n    BOSSES: 1,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction StartMenu({showSettings, startGame, certificates, bosses, difficulty, mapWidth, mapHeight, generateItems, getRandomNumber}) {\n    function _startGame() {\n        let playerX = getRandomNumber(0, mapWidth - 1);\n        let map = generateMap(playerX);\n        console.log(map, playerX);\n        startGame({map, playerX});\n    }\n\n    function generateMap(playerX) {\n        let generatedMap = [];\n        let numberOfWalls = Math.ceil((mapWidth * difficulty) / 100);\n        console.log(numberOfWalls);\n        for (let i = 0; i < mapHeight; i++) {\n            let generatedRowMap = [];\n\n            if (i === 0) {\n                generatedRowMap[playerX] = 'player';\n            }\n\n            let wallVar = 0;\n            while (wallVar < numberOfWalls) {\n                let randomSquare = getRandomNumber(0, mapWidth - 1);\n                if (generatedRowMap[randomSquare] !== 'wall' && generatedRowMap[randomSquare] !== 'player') {\n                    generatedRowMap[randomSquare] = 'wall';\n                    wallVar++;\n                }\n            }\n\n            for (let j = 0; j < mapWidth; j++) {\n                if (!generatedRowMap[j]) {\n                    generatedRowMap[j] = 'empty';\n                }\n            }\n            generatedMap.push(generatedRowMap);\n        }\n\n        generateBosses(generatedMap, bosses);\n        generateItems(generatedMap, certificates, 'certificate');\n\n        return generatedMap;\n    }\n\n    function generateBosses(map, bosses) {\n        let bossesInterval = Math.floor(mapHeight / bosses);\n        let bossVar = 0;\n        console.log(bossesInterval);\n        while (bossVar < mapHeight) {\n            let bossY = getRandomNumber(bossVar, bossVar + bossesInterval - 5);\n            let bossX = getRandomNumber(0, mapWidth - 5);\n            console.log(bossVar);\n            for (let bw = 1; bw < 4; bw++) {\n                map[bossY][bossX] = 'boss-wall';\n                map[bossY + bw][bossX] = 'boss-wall';\n                map[bossY][bossX + bw] = 'boss-wall';\n                map[bossY + bw][bossX + 3] = 'boss-wall';\n                map[bossY + 3][bossX + bw] = 'boss-wall';\n            }\n            for (let b = 1; b < 3; b++) {\n                map[bossY + 1][bossX + b] = 'boss';\n                map[bossY + 2][bossX + b] = 'boss';\n            }\n            bossVar += bossesInterval;\n        }\n    }\n\n    return (\n        <div className=\"start-container\">\n            <h1>Dungeon Crawl</h1>\n            <div className=\"start-menu\">\n                <button type=\"button\" onClick={_startGame}>Start Game</button>\n                <button type=\"button\" onClick={showSettings}>Settings</button>\n            </div>\n        </div>\n    );\n}\n\nStartMenu.propTypes = {\n    showSettings: PropTypes.func.isRequired,\n    startGame: PropTypes.func.isRequired,\n    certificates: PropTypes.number.isRequired,\n    bosses: PropTypes.number.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    generateItems: PropTypes.func.isRequired,\n    getRandomNumber: PropTypes.func.isRequired,\n};\n\nexport default StartMenu;","import {connect} from 'react-redux';\nimport ActionsStartMenu from \"../actions/startMenu\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport StartMenu from \"../components/StartMenu\";\n\nconst mapStateToProps = state => {\n    return {\n        certificates: gameOptions.CERTIFICATES,\n        bosses: gameOptions.BOSSES,\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        startGame: ({map, playerX}) => dispatch(ActionsStartMenu[\"GAME/START_GAME\"]({map, playerX})),\n        showSettings: () => dispatch(ActionsStartMenu[\"SETTINGS/SHOW_SETTINGS\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StartMenu);","import {createAction} from 'redux-actions';\n\nexport default {\n    'GAME/MOVE_LEFT': createAction('GAME/MOVE_LEFT'),\n    'GAME/MOVE_UP': createAction('GAME/MOVE_UP'),\n    'GAME/MOVE_RIGHT': createAction('GAME/MOVE_RIGHT'),\n    'GAME/MOVE_DOWN': createAction('GAME/MOVE_DOWN'),\n    'GAME/CHANGE_OFFSET': createAction('GAME/CHANGE_OFFSET'),\n    'GAME/ADD_CERTIFICATE': createAction('GAME/ADD_CERTIFICATE'),\n    'GAME/START_LEVEL2': createAction('GAME/START_LEVEL2'),\n    'GAME/ADD_SKILL': createAction('GAME/ADD_SKILL'),\n    'GAME/REMOVE_BOSS_WALLS': createAction('GAME/REMOVE_BOSS_WALLS'),\n    'GAME/ADD_POINTS_BOSS': createAction('GAME/ADD_POINTS_BOSS'),\n    'GAME/QUIT_GAME': createAction('GAME/QUIT_GAME'),\n    'GAME/END_GAME': createAction('GAME/END_GAME'),\n};","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Game(\n    {\n        certificatesAll,\n        skillsAll,\n\n        gameMap,\n        currentCertificates,\n        currentSkills,\n        isDefeatedBoss,\n        level,\n        points,\n        currentOffset,\n        playerX,\n        playerY,\n\n        difficulty,\n        mapWidth,\n        mapHeight,\n        viewportHeight,\n\n        moveLeft,\n        moveUp,\n        moveRight,\n        moveDown,\n        changeOffset,\n        addCertificate,\n        startLevel2,\n        addSkill,\n        removeBossWalls,\n        addPointsBoss,\n        quitGame,\n        endGame,\n\n        generateItems,\n    }\n) {\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        if (!isDefeatedBoss) {\n            function handleWindowKeyDown(e) {\n                const beforeBorder = 3;\n                switch (e.key) {\n                    case 'ArrowLeft':\n                        console.log('ArrowLeft');\n                        if (playerX === 0 && gameMap[playerY][mapWidth - 1] !== 'wall' && gameMap[playerY][mapWidth - 1] !== 'boss-wall') {\n                            addItems(gameMap[playerY][mapWidth - 1]);\n                            moveLeft(mapWidth - 1);\n                            break;\n                        }\n                        if (playerX !== 0 && gameMap[playerY][playerX - 1] !== 'wall' && gameMap[playerY][playerX - 1] !== 'boss-wall') {\n                            addItems(gameMap[playerY][playerX - 1]);\n                            moveLeft(playerX - 1);\n                            break;\n                        }\n                        break;\n                    case 'ArrowUp':\n                        console.log('ArrowUp');\n                        if (playerY === 0) {\n                            break;\n                        }\n                        if (gameMap[playerY - 1][playerX] !== 'wall' && gameMap[playerY - 1][playerX] !== 'boss-wall') {\n                            if ((playerY <= beforeBorder + currentOffset) && !(playerY <= beforeBorder)) {\n                                changeOffset(currentOffset - 1);\n                            }\n                            addItems(gameMap[playerY - 1][playerX]);\n                            moveUp(playerY - 1);\n                            break;\n                        }\n                        break;\n                    case 'ArrowRight':\n                        console.log('ArrowRight');\n                        if (playerX === mapWidth - 1 && gameMap[playerY][0] !== 'wall' && gameMap[playerY][0] !== 'boss-wall') {\n                            addItems(gameMap[playerY][0]);\n                            moveLeft(0);\n                            break;\n                        }\n                        if (playerX !== mapWidth - 1 && gameMap[playerY][playerX + 1] !== 'wall' && gameMap[playerY][playerX + 1] !== 'boss-wall') {\n                            addItems(gameMap[playerY][playerX + 1]);\n                            moveRight(playerX + 1);\n                            break;\n                        }\n                        break;\n                    case 'ArrowDown':\n                        console.log('ArrowDown');\n                        if (playerY === gameMap.length - 1) {\n                            break;\n                        }\n                        if (gameMap[playerY + 1][playerX] !== 'wall' && gameMap[playerY + 1][playerX] !== 'boss-wall') {\n                            if ((playerY >= (viewportHeight - 1) - beforeBorder + currentOffset) && !(playerY >= (mapHeight - 1) - beforeBorder)) {\n                                changeOffset(currentOffset + 1);\n                            }\n                            addItems(gameMap[playerY + 1][playerX]);\n                            moveDown(playerY + 1);\n                            break;\n                        }\n                        break;\n                    case 'Escape':\n                        console.log('Quit Game');\n                        _quitGame()\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            window.addEventListener('keydown', handleWindowKeyDown);\n            return () => window.removeEventListener('keydown', handleWindowKeyDown);\n        }\n    }, [playerX, playerY]);\n\n    useEffect(() => {\n        timeoutFunc(currentCertificates,'+1 certificate', 500);\n    },[currentCertificates]);\n\n    useEffect(() => {\n        timeoutFunc(currentSkills,'+1 skill', 500);\n    },[currentSkills]);\n\n    function timeoutFunc(item, messageText, time) {\n        if (item > 0) {\n            setMessage(messageText);\n            const timeout = setTimeout(() => {\n                setMessage('');\n            }, time);\n\n            return () => clearTimeout(timeout);\n        }\n    }\n\n    function addItems(mapCoordinates) {\n        if (mapCoordinates === 'certificate') {\n            if (currentCertificates === certificatesAll - 1) {\n                let map = gameMap.slice();\n                console.log(`map`, map);\n                generateItems(map, skillsAll, 'skill');\n                console.log(`map`, map);\n                startLevel2({map});\n            }\n            addCertificate(Math.round(difficulty * mapHeight / 100 * viewportHeight / 10));\n        }\n        if (mapCoordinates === 'skill') {\n            if (currentSkills === skillsAll - 1) {\n                let map = gameMap.slice();\n                console.log(`map`, map);\n                map.forEach((rowMap, rowIndex) => rowMap.forEach((square, squareIndex) => {\n                    if (square === 'boss-wall') {\n                        console.log(`square-change`, square);\n                        map[rowIndex][squareIndex] = 'empty';\n                    }\n                }));\n                console.log(`map`, map);\n                removeBossWalls({map});\n            }\n            addSkill(Math.round(difficulty * 10 * mapHeight / 100 * viewportHeight / 10));\n        }\n        if (mapCoordinates === 'boss') {\n            addPointsBoss(Math.round(difficulty * 30 * mapHeight / 100 * viewportHeight / 10));\n            endGame();\n        }\n    }\n\n    function _quitGame() {\n        if (window.confirm('Are you sure you want to quit?')) {\n            quitGame();\n        }\n    }\n\n    function renderMap() {\n        let visibleMap = [];\n        for (let index = currentOffset; index < currentOffset + viewportHeight; index++) {\n            let visibleRowsMap = gameMap[index];\n            visibleMap.push(visibleRowsMap);\n        }\n        console.log(visibleMap);\n        console.log(currentOffset);\n\n        const windowHeight = document.documentElement.clientHeight;\n        const squareSize = Math.floor((windowHeight * 51) / (100 * viewportHeight));\n        console.log('squareSize',squareSize);\n\n        return (\n            visibleMap.map((rowMap, rowIndex) => {\n                return (\n                    <div className={\n                        rowIndex + currentOffset === 0 ? \"row-map first\" : rowIndex + currentOffset === (mapHeight - 1) ? \"row-map last\" : \"row-map\"\n                    } key={rowIndex + currentOffset}>\n                        {\n                            rowMap.map((square, squareIndex) => {\n                                return (\n                                    <div className={`square ${square}`} key={`${rowIndex + currentOffset}${squareIndex}`} style={{width: `${squareSize}px`, height: `${squareSize}px`}}></div>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            })\n        )\n    }\n\n    function renderGameOver() {\n        return (\n            <div className=\"game-over\">\n                <p>Congratulations!</p>\n                <p>You left the dungeon!</p>\n                <p className=\"result\">Your result: {points} points.</p>\n            </div>\n        )\n    }\n    \n    return (\n        <div className=\"game\">\n            <div className=\"top-bar-head\">\n                <h2>Dungeon Crawl</h2>\n                <button className=\"btn-quit\" type=\"text\" onClick={_quitGame}>Quit Game</button>\n            </div>\n            <div className=\"top-bar\">\n                <div className=\"top-bar-stats\">\n                    <div>Level: <span>{level}</span></div>\n                    <div>\n                        <p>Certificates: <span>{currentCertificates}/{certificatesAll}</span></p>\n                        <progress value={currentCertificates} max={certificatesAll}></progress>\n                    </div>\n                    <div>\n                        <p>Skills: <span>{currentSkills}/{skillsAll}</span></p>\n                        <progress value={currentSkills} max={skillsAll}></progress>\n                    </div>\n                    <div>Points: <span>{points}</span></div>\n                </div>\n                <div className=\"messages\">\n                    <p>{message}</p>\n                    { level === 1 && <p>Collect 25 certificates.</p> }\n                    { level === 2 && currentSkills < skillsAll && <p>Collect 3 skills.</p> }\n                    { level === 2 && currentSkills === skillsAll && !isDefeatedBoss && <p>Find the boss.</p> }\n                </div>\n            </div>\n            <div className=\"map\">\n                { !isDefeatedBoss ? renderMap() : renderGameOver() }\n            </div>\n            <div className=\"bottom-bar\">\n                <div>\n                    <p>Press 'Arrows' on the keyboard to move.</p>\n                    <p>Press 'Esc' to quit the game or click the button at the top right.</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nGame.propTypes = {\n    certificatesAll: PropTypes.number.isRequired,\n    skillsAll: PropTypes.number.isRequired,\n    gameMap: PropTypes.arrayOf(PropTypes.array).isRequired,\n    currentCertificates: PropTypes.number.isRequired,\n    currentSkills: PropTypes.number.isRequired,\n    isDefeatedBoss: PropTypes.bool.isRequired,\n    level: PropTypes.number.isRequired,\n    points: PropTypes.number.isRequired,\n    currentOffset: PropTypes.number.isRequired,\n    playerX: PropTypes.number.isRequired,\n    playerY: PropTypes.number.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportHeight: PropTypes.number.isRequired,\n    moveLeft: PropTypes.func.isRequired,\n    moveUp: PropTypes.func.isRequired,\n    moveRight: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n    changeOffset: PropTypes.func.isRequired,\n    addCertificate: PropTypes.func.isRequired,\n    startLevel2: PropTypes.func.isRequired,\n    addSkill: PropTypes.func.isRequired,\n    removeBossWalls: PropTypes.func.isRequired,\n    addPointsBoss: PropTypes.func.isRequired,\n    quitGame: PropTypes.func.isRequired,\n    endGame: PropTypes.func.isRequired,\n    generateItems: PropTypes.func.isRequired,\n};\n\nexport default Game;","import {connect} from 'react-redux';\nimport ActionsGame from \"../actions/game\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport Game from \"../components/Game\";\n\nconst mapStateToProps = state => {\n    return {\n        certificatesAll: gameOptions.CERTIFICATES,\n        skillsAll: gameOptions.SKILLS,\n\n        gameMap: state.game.map,\n        currentCertificates: state.game.certificates,\n        currentSkills: state.game.skills,\n        isDefeatedBoss: state.game.isDefeatedBoss,\n        level: state.game.level,\n        points: state.game.points,\n        currentOffset: state.game.currentOffset,\n        playerX: state.game.playerX,\n        playerY: state.game.playerY,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportHeight: state.settings.viewportHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        moveLeft: (newPlayerX) => dispatch(ActionsGame[\"GAME/MOVE_LEFT\"](newPlayerX)),\n        moveUp: (newPlayerY) => dispatch(ActionsGame[\"GAME/MOVE_UP\"](newPlayerY)),\n        moveRight: (newPlayerX) => dispatch(ActionsGame[\"GAME/MOVE_RIGHT\"](newPlayerX)),\n        moveDown: (newPlayerY) => dispatch(ActionsGame[\"GAME/MOVE_DOWN\"](newPlayerY)),\n        changeOffset: (currentOffset) => dispatch(ActionsGame[\"GAME/CHANGE_OFFSET\"](currentOffset)),\n        addCertificate: (points) => dispatch(ActionsGame[\"GAME/ADD_CERTIFICATE\"](points)),\n        startLevel2: ({map}) => dispatch(ActionsGame[\"GAME/START_LEVEL2\"]({map})),\n        addSkill: (points) => dispatch(ActionsGame[\"GAME/ADD_SKILL\"](points)),\n        removeBossWalls: ({map}) => dispatch(ActionsGame[\"GAME/REMOVE_BOSS_WALLS\"]({map})),\n        addPointsBoss: (points) => dispatch(ActionsGame[\"GAME/ADD_POINTS_BOSS\"](points)),\n        quitGame: () => dispatch(ActionsGame[\"GAME/QUIT_GAME\"]()),\n        endGame: () => dispatch(ActionsGame[\"GAME/END_GAME\"]()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Game);","import {createAction} from 'redux-actions';\n\nexport default {\n    'SETTINGS/HIDE_SETTINGS': createAction('SETTINGS/HIDE_SETTINGS'),\n    'SETTINGS/SAVE_SETTINGS': createAction('SETTINGS/SAVE_SETTINGS'),\n};","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Settings({difficultyOptions, difficulty, mapWidth, mapHeight, viewportWidth, viewportHeight, backToStartMenu, saveSettings}) {\n    const [difficultyInner, setDifficultyInner] = useState(difficulty);\n    const [mapHeightInner, setMapHeightInner] = useState(mapHeight);\n    const [viewportHeightInner, setViewportHeightInner] = useState(viewportHeight);\n\n    function _change(name, e) {\n        switch(name) {\n            case 'Difficulty': setDifficultyInner(+e.target.value); break;\n            case 'Map Height': setMapHeightInner(+e.target.value); break;\n            case 'Viewport Height': setViewportHeightInner(+e.target.value); break;\n            default: break;\n        }\n    }\n\n    function _saveSettings(e) {\n        e.preventDefault();\n        console.log({difficultyInner, mapHeightInner, viewportHeightInner});\n        saveSettings({difficultyInner, mapHeightInner, viewportHeightInner});\n    }\n\n    return (\n        <div className=\"settings\">\n            <div className=\"top-bar-head\">\n                <h3>Settings</h3>\n                <button className=\"btn-back\" type=\"text\" onClick={backToStartMenu}>Back</button>\n            </div>\n            <form className=\"settings-form\" onSubmit={_saveSettings}>\n                <div>\n                    <label htmlFor=\"difficulty\">Difficulty:</label>\n                    <select id=\"difficulty\" value={difficultyInner} onChange={_change.bind(this, 'Difficulty')}>\n                        <option value={difficultyOptions.easy}>Easy</option>\n                        <option value={difficultyOptions.medium}>Medium</option>\n                        <option value={difficultyOptions.hard}>Hard</option>\n                    </select>\n                </div>\n                {/*<div>*/}\n                {/*    <label htmlFor=\"map-width\">Map Width:</label>*/}\n                {/*    <input id=\"map-width\" type=\"number\" value={mapWidth} min=\"10\" max=\"250\" step=\"5\" onChange={_change.bind(this, 'Map Width')} />*/}\n                {/*</div>*/}\n                <div>\n                    <label htmlFor=\"map-height\">Map Height <small>(50 - 500)</small>:</label>\n                    <input id=\"map-height\" type=\"number\" value={mapHeightInner} min=\"50\" max=\"500\" step=\"5\" onChange={_change.bind(this, 'Map Height')} />\n                </div>\n                {/*<div>*/}\n                {/*    <label htmlFor=\"viewport-width\">Viewport Width:</label>*/}\n                {/*    <input id=\"viewport-width\" type=\"number\" value={viewportWidth} min=\"10\" max=\"20\" step=\"1\" onChange={_change.bind(this, 'Viewport Width')} />*/}\n                {/*</div>*/}\n                <div>\n                    <label htmlFor=\"viewport-height\">Viewport Height <small>(10 - 20)</small>:</label>\n                    <input id=\"viewport-height\" type=\"number\" value={viewportHeightInner} min=\"10\" max=\"20\" step=\"1\" onChange={_change.bind(this, 'Viewport Height')} />\n                </div>\n                <button type=\"submit\" className=\"btn-save\">Save</button>\n            </form>\n        </div>\n    );\n}\n\nSettings.propTypes = {\n    difficultyOptions: PropTypes.object.isRequired,\n    difficulty: PropTypes.number.isRequired,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n    viewportWidth: PropTypes.number.isRequired,\n    viewportHeight: PropTypes.number.isRequired,\n    backToStartMenu: PropTypes.func.isRequired,\n    saveSettings: PropTypes.func.isRequired,\n};\n\nexport default Settings;","import {connect} from 'react-redux';\nimport ActionsSettings from \"../actions/settings\";\nimport gameOptions from \"../gameOptions/gameOptions\";\nimport Settings from \"../components/Settings\";\n\nconst mapStateToProps = state => {\n    return {\n        difficultyOptions: gameOptions.DIFFICULTY,\n\n        difficulty: state.settings.difficulty,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n        viewportWidth: state.settings.viewportWidth,\n        viewportHeight: state.settings.viewportHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        backToStartMenu: () => dispatch(ActionsSettings[\"SETTINGS/HIDE_SETTINGS\"]()),\n        saveSettings: ({difficultyInner, mapHeightInner, viewportHeightInner}) => dispatch(ActionsSettings[\"SETTINGS/SAVE_SETTINGS\"]({difficultyInner, mapHeightInner, viewportHeightInner})),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Settings);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport StartMenu from \"./containers/StartMenu\";\nimport Game from \"./containers/Game\";\nimport Settings from \"./containers/Settings\";\n\nfunction App({isSettingsShow, gameOn, mapWidth, mapHeight}) {\n    const windowHeight = document.documentElement.clientHeight;\n\n    function generateItems(map, items, itemClass) {\n        let itemsInterval = Math.floor(mapHeight / items);\n        let itemVar = 0;\n        let itemsBalance = 0;\n        if (mapHeight % items !== 0) {\n            itemVar = 1;\n            itemsBalance = Math.ceil((mapHeight % items)) - 1;\n        }\n        console.log(`itemBalance`, itemsBalance);\n        console.log(`itemsInterval`, itemsInterval);\n        while (itemVar < mapHeight) {\n            let itemY = getRandomNumber(itemVar, itemVar + itemsInterval - 1);\n            let itemX = getRandomNumber(0, mapWidth - 1);\n            console.log(`itemVar`, itemVar);\n            if ( (map[itemY][itemX] === 'empty') &&\n                !(\n                    !(itemX === 0) && !(itemX === mapWidth - 1) && !(itemY === 0) && !(itemY === mapHeight - 1) &&\n                    map[itemY][itemX - 1] === 'wall' && map[itemY][itemX - 1] === 'boss-wall' &&\n                    map[itemY + 1][itemX] === 'wall' && map[itemY + 1][itemX] === 'boss-wall' &&\n                    map[itemY][itemX + 1] === 'wall' && map[itemY][itemX + 1] === 'boss-wall' &&\n                    map[itemY - 1][itemX] === 'wall' && map[itemY - 1][itemX] === 'boss-wall'\n                )\n            ) {\n                map[itemY][itemX] = itemClass;\n                if (itemsBalance > 0) {\n                    itemVar += itemsInterval + 1;\n                    itemsBalance--;\n                } else if (itemsBalance === 0) {\n                    itemVar += itemsInterval;\n                }\n            }\n        }\n    }\n\n    function getRandomNumber(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    return (\n        <div style={{height: windowHeight + 'px'}}>\n            { (!isSettingsShow && !gameOn) && <StartMenu generateItems={generateItems} getRandomNumber={getRandomNumber}/> }\n            { gameOn && <Game generateItems={generateItems} getRandomNumber={getRandomNumber}/> }\n            { isSettingsShow && <Settings /> }\n        </div>\n    );\n}\n\nApp.propTypes = {\n    isSettingsShow: PropTypes.bool,\n    gameOn: PropTypes.bool,\n    mapWidth: PropTypes.number.isRequired,\n    mapHeight: PropTypes.number.isRequired,\n};\n\nexport default App;","import {connect} from 'react-redux';\nimport App from \"../App\";\n\nconst mapStateToProps = state => {\n    return {\n        isSettingsShow: state.settings.isSettingsShow,\n        gameOn: state.game.gameOn,\n        mapWidth: state.settings.mapWidth,\n        mapHeight: state.settings.mapHeight,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\n\nimport ActionsStartMenu from \"../actions/startMenu\";\nimport ActionsSettings from './../actions/settings';\n\nconst initialState = {\n    isSettingsShow: false,\n    difficulty: 20,\n    mapWidth: 20,\n    mapHeight: 100,\n    viewportWidth: 20,\n    viewportHeight: 10,\n};\n\nconst settingsReducer = handleActions({\n    [ActionsStartMenu['SETTINGS/SHOW_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isSettingsShow: true,\n            }\n        });\n    },\n\n    [ActionsSettings['SETTINGS/HIDE_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isSettingsShow: false,\n            }\n        });\n    },\n    [ActionsSettings['SETTINGS/SAVE_SETTINGS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                difficulty: action.payload.difficultyInner,\n                mapHeight: action.payload.mapHeightInner,\n                viewportHeight: action.payload.viewportHeightInner,\n            }\n        });\n    },\n}, initialState);\n\nexport default settingsReducer;","import update from 'immutability-helper';\nimport {handleActions} from 'redux-actions';\n\nimport ActionsStartMenu from \"../actions/startMenu\";\nimport ActionsGame from './../actions/game';\n\nconst initialState = {\n    gameOn: false,\n    map: [],\n    certificates: 0,\n    skills: 0,\n    isDefeatedBoss: false,\n    level: 0,\n    points: 0,\n    currentOffset: 0,\n    playerX: 0,\n    playerY: 0,\n};\n\nconst gameReducer = handleActions({\n    [ActionsStartMenu['GAME/START_GAME']]: (state, action) => {\n        console.log(action.payload);\n        return update(state, {\n            $merge: {\n                gameOn: true,\n                map: action.payload.map,\n                level: 1,\n                playerX: action.payload.playerX,\n            }\n        });\n    },\n\n    [ActionsGame['GAME/MOVE_LEFT']]: (state, action) => {\n        return update(state, {\n            map: {\n                 [state.playerY]: {[state.playerX]: {$set: 'empty'}, [action.payload]: {$set: 'player'}},\n            },\n            playerX: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_UP']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}},\n                [action.payload]: {[state.playerX]: {$set: 'player'}}\n            },\n            playerY: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_RIGHT']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}, [action.payload]: {$set: 'player'}},\n            },\n            playerX: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/MOVE_DOWN']]: (state, action) => {\n        return update(state, {\n            map: {\n                [state.playerY]: {[state.playerX]: {$set: 'empty'}},\n                [action.payload]: {[state.playerX]: {$set: 'player'}}\n            },\n            playerY: {$set: action.payload},\n        });\n    },\n    [ActionsGame['GAME/CHANGE_OFFSET']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                currentOffset: action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_CERTIFICATE']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                certificates: state.certificates + 1,\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/START_LEVEL2']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                map: action.payload.map,\n                level: 2,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_SKILL']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                skills: state.skills + 1,\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/REMOVE_BOSS_WALLS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                map: action.payload.map,\n            }\n        });\n    },\n    [ActionsGame['GAME/ADD_POINTS_BOSS']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                points: state.points + action.payload,\n            }\n        });\n    },\n    [ActionsGame['GAME/QUIT_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                gameOn: initialState.gameOn,\n                map: initialState.map,\n                certificates: initialState.certificates,\n                skills: initialState.skills,\n                isDefeatedBoss: initialState.isDefeatedBoss,\n                level: initialState.level,\n                points: initialState.points,\n                currentOffset: initialState.currentOffset,\n                playerX: initialState.playerX,\n                playerY: initialState.playerY,\n            }\n        });\n    },\n    [ActionsGame['GAME/END_GAME']]: (state, action) => {\n        return update(state, {\n            $merge: {\n                isDefeatedBoss: true,\n            }\n        });\n    },\n}, initialState);\n\nexport default gameReducer;","import { combineReducers } from 'redux'\n\nimport settings from './settings';\nimport game from './game';\n\nexport default combineReducers({ settings, game });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducers';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger';\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}